<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bob 學習筆記</title>
    <link>https://blog.poyi.tw/</link>
    <description>Recent content on Bob 學習筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <lastBuildDate>Sun, 15 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.poyi.tw/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[gRPC] Golang &amp; Ruby</title>
      <link>https://blog.poyi.tw/blog/2019/09/15/grpc-golang-ruby/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2019/09/15/grpc-golang-ruby/</guid>
      <description>gRPC gRPC是由Google推出的Remote Procedure Calls(RPC)，開發上支援各種主流語言，底層採用HTTP/2協定，再利用Protocol Buffers (protobuf)序列化資料來更有效地進行傳輸。
有別於傳統的REST，gRPC之間溝通不需要傳遞多餘的HTTP header及HTTP method(GET, POST, PUT, DELETE)，而是由事先就必須定義好protobuf的資料結構，而server端與client端直接去實作這些interface即可，並不需要額外去寫路由。
Install gRPC go get google.golang.org/grpc go get -u github.com/golang/protobuf/{proto,protoc-gen-go} 定義protobuf - demo.proto syntax = &amp;#34;proto3&amp;#34;;package demo;service DemoService { rpc SayHello (HelloRequest) returns (HelloResponse); rpc Sum (SumRequest) returns (SumResponse);}message HelloRequest { string name = 1;}message HelloResponse { string message = 1;}message SumRequest { int64 numberOne = 1; int64 numberOne = 2;}message SumResponse { int64 sum = 1;} Server - Golang 實作 func (s *server) SayHello(ctx context.</description>
    </item>
    
    <item>
      <title>[Ubuntu] Ruby on Rails 基本環境建置 - Ubuntu 18.04 LTS</title>
      <link>https://blog.poyi.tw/blog/2019/05/26/rails-ubuntu-environment-ubuntu18-dot-04/</link>
      <pubDate>Sun, 26 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2019/05/26/rails-ubuntu-environment-ubuntu18-dot-04/</guid>
      <description># user sudo adduser deploy sudo adduser deploy sudo exit# required libraries curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - echo &amp;#34;deb https://dl.yarnpkg.com/debian/ stable main&amp;#34; | sudo tee /etc/apt/sources.list.d/yarn.list sudo add-apt-repository ppa:chris-lea/redis-server sudo apt-get update sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev software-properties-common libffi-dev dirmngr gnupg apt-transport-https ca-certificates redis-server redis-tools nodejs yarn# ruby git clone https://github.</description>
    </item>
    
    <item>
      <title>[Crypto] BIP-39 mnemonic words</title>
      <link>https://blog.poyi.tw/blog/2017/12/10/bitcoin-improvement-proposal-39/</link>
      <pubDate>Sun, 10 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2017/12/10/bitcoin-improvement-proposal-39/</guid>
      <description>// 個人筆記尚未整理
錢包本身並不存放幣，存放的是私鑰
而透過私鑰能轉換成錢包地址，並到區塊鏈上將交易紀錄及餘額取回
隨機(non-deterministic)錢包  每個被隨機建立出來的私鑰沒有相關性 需要各別管理及備份  deterministic wallet  透過一組主私鑰來建立許多子私鑰 只需要備份主私鑰
 Hierarchical Deterministic(HD) Wallet
 大部分的HD錢包(Jaxx、ledgerwallet&amp;hellip;)都實作了BIP-32、BIP-39、BIP-44
  BIP-39 / BIP-32 / BIP-44  BIP-32 - 規範出如何建立一個HD錢包，由用一份seed產生多組私鑰 BIP-39 - 制定由哪些字組來產生成512 bit seed BIP-44 - 基於BIP-32上的擴充，提供了5層path，其中包括了多幣種  目前已經成為大部分加密貨幣的標準規範
12~24字組 =&amp;gt; 512 bit seed(BIP-39 seed) =&amp;gt; 主私鑰 =&amp;gt; 子私鑰(公鑰、地址)
bip-0039-wordlists - 共2048字
若錢包產出為12/24字組，那所有排列的組合共用2048的12/24次方
###　BIP-44五層path
 m/purpose&amp;rsquo;/coin_type&amp;rsquo;/account&amp;rsquo;/change/address_index m/44&amp;rsquo;/60&amp;rsquo;/0&amp;rsquo;/0/0 : ethererum m/44&amp;rsquo;/0&amp;rsquo;/0&amp;rsquo;/0/0 : bitcoin  Reference:
https://github.com/bitcoin/bips
https://medium.com/@bun919tw/hd-wallet-970096a6d72f</description>
    </item>
    
    <item>
      <title>[Crypto] 加密貨幣(Dash Pivx Zcash Monero)筆記</title>
      <link>https://blog.poyi.tw/blog/2017/11/04/private-coins-monero-dash-zcash-pivx/</link>
      <pubDate>Sat, 04 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2017/11/04/private-coins-monero-dash-zcash-pivx/</guid>
      <description>// 個人筆記尚未整理
Pirvacy Coins 匿名貨幣 - 強調隱私 Bitcoin 本身具有一定的隱私性，錢包地址跟使用者之間沒有直接的關聯性 所有交易都是公開的，任何人都可以知道某錢包地址現在或過去有過多少交易，但理論上無法得知該錢包是持有者是誰。
但今天你發送一筆交易給朋友或是客戶，對方得知了你的錢包地址，就可以觀察你持有多少BTC，就像你的銀行存款暴露在外一樣，任何人只要知道你的錢包地址都可以查得到你的餘額及所有交易紀錄。當然你也可以一直換錢包地址或是透過交易所發送來隱藏你主要的錢包地址，而這些匿名貨幣用各自的手段去解決這些問題。
Dash 主要特色是雙層網路並提供即時發送及匿名發送  150 seconds/block
 Masternodes 主節點  需抵押 1000 Dash 具投票權可以決定Dash未來走向 45%的區塊獎勵 持續 sync blockchain 提供 InstantSend(即時發送) 服務 提供 PirvateSend(匿名發送) 服務  PirvateSend 匿名發送 - 混幣(Coinjoin)  該筆交易會在Masternodes上與相同數量的交易進行合併，併成同一筆交易來混淆你的資金流向  InstantSend 即時發送  每個block產生後會隨機挑選10個Masternodes來提供InstantSend服務 發送交易時這10個Masternodes會優先收到廣播，而它們會對其他node廣播說這筆發送方已被鎖定，如果在這同時收到另一筆來自發送方的交易將會被reject 這時該筆交易會馬上收到5confirm，即完成交易 (1.3秒)  Pivx 特色與Dash相同，似乎更著重在隱私 - PoS版本的Dash  60 seconds/block
 Masternodes 主節點  需抵押 10000 Pivx 具投票權可以決定Pivx未來走向 持續 sync blockchain 提供 InstantSend(即時發送) 服務 提供 PirvateSend(匿名發送) 服務  PirvateSend 匿名發送 - 混幣(Coinjoin)  該筆交易會在Masternodes上與相同數量的交易進行合併，併成同一筆交易來混淆你的資金流向 Zerocoin Protocol(zPiv)  InstantSend 即時發送(SwiftTx)  SwiftTx  Zcash 主要特色是錢包地址分為兩種類型，Public address(t-addrs)及 Shielded address(z-addrs) Public address(t-addrs)  t開頭的地址 與其他加密貨幣地址相同，在公開帳本可查詢餘額、歷史交易  Shielded address(z-addrs)  z開頭的地址 零知識證明(Zero-knowledge proof) - zk-SNARKs 無法在公開帳本上查詢  Monero(XMR) 任何地址交易金額都無法查詢，完整的強制匿名貨幣  使用 CryptoNote 演算法 Ring Signature RingCT 動態區塊大小</description>
    </item>
    
    <item>
      <title>[ZCash] 如何使用Windows來挖礦</title>
      <link>https://blog.poyi.tw/blog/2017/01/15/how-to-mine-zcash-on-windows/</link>
      <pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2017/01/15/how-to-mine-zcash-on-windows/</guid>
      <description>幾千塊的顯卡來挖其實收益非常低，電費還比較貴，玩票性質再試試看吧
 ZCash錢包 首先要下載一個錢包並取得address(t1bjg8ZSVhW2LzRP3BiHZKbMGipLJuxibYE)來存放你挖到的幣
推薦Jaxx，支援windows/macos/ios/android&amp;hellip;，幣別也支援btc/eth/etc/zec&amp;hellip;.。
Nvidia挖ZCash會比較快，如果是AMD可考慮挖Ethereum之類的
Miner 挖礦軟體 (挑一款即可) EWBF Miner EWBF&amp;rsquo;s CUDA Zcash miner
 EWBF Miner - 效率好30% - 使用時會吃掉大部分顯卡效能無法正常使用  Nicehash - nheqminer-0.5c nheqminer-0.5c
 Nicehash - 不開大型遊戲的話，電腦還可以正常使用  礦池 如果是組礦機多張顯卡，算力夠強的話可以考慮自己挖，只是台桌機的話就加入礦池吧
礦池是你提供多少算力，就會回饋給你多少，收益比較穩定
自己solo的話就是有挖到block才有收益
http://zcash.flypool.org/
通常礦池首頁都會寫很清楚該怎麼做
# EWBF Miner miner.exe --server &amp;lt;server&amp;gt; --user &amp;lt;address&amp;gt;.&amp;lt;worker&amp;gt; --port &amp;lt;port&amp;gt; --cuda_devices 0 1 2 3 miner.exe --server asia1-zcash.flypool.org --user t1bjg8ZSVhW2LzRP3BiHZKbMGipLJuxibYE.bob3 --port 3333 --cuda_devices 0 1 2 3# Nicehash Miner nheqminer.exe -cd 0 -l &amp;lt;礦池server&amp;gt; -u &amp;lt;你自己的錢包地址&amp;gt;.</description>
    </item>
    
    <item>
      <title>[Ubuntu] Ruby on Rails 基本環境建置 - Ubuntu 16.04 LTS</title>
      <link>https://blog.poyi.tw/blog/2016/11/26/rails-ubuntu-environment-ubuntu16-dot-04/</link>
      <pubDate>Sat, 26 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2016/11/26/rails-ubuntu-environment-ubuntu16-dot-04/</guid>
      <description># 建立user sudo adduser bob sudo adduser bob sudo su bob# 安裝常用lib sudo apt-get update sudo apt-get upgrade sudo apt-get install vim nodejs autoconf sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev Install Ruby &amp;amp; Rails # 使用rbenv來管理ruby cd git clone https://github.com/rbenv/rbenv.git ~/.rbenv echo &amp;#39;export PATH=&amp;#34;$HOME/.rbenv/bin:$PATH&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.bashrc echo &amp;#39;eval &amp;#34;$(rbenv init -)&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.bashrc exec $SHELL git clone https://github.com/rbenv/ruby-build.git ~/.</description>
    </item>
    
    <item>
      <title>[Mac] Ruby on Rails 基本環境建置 - 10.14 Mojave</title>
      <link>https://blog.poyi.tw/blog/2016/10/30/rails-mac-os-environment-sierra/</link>
      <pubDate>Sun, 30 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2016/10/30/rails-mac-os-environment-sierra/</guid>
      <description># Installing Homebrew ruby -e &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;#34;# Installing Ruby # 改用相對輕量的rbenv取代肥肥的rvm brew install rbenv ruby-build echo &amp;#39;if which rbenv &amp;gt; /dev/null; then eval &amp;#34;$(rbenv init -)&amp;#34;; fi&amp;#39; &amp;gt;&amp;gt; ~/.bash_profile source ~/.bash_profile rbenv install 2.6.3 rbenv global 2.6.3# Installing Rails gem install rails -v 6.0.0.rc1 rbenv rehash# others brew install mysql brew install redis brew install ssdb brew install memcached</description>
    </item>
    
    <item>
      <title>[Ubuntu] Linux 稍微進階的常用指令</title>
      <link>https://blog.poyi.tw/blog/2016/10/19/my-linux-command/</link>
      <pubDate>Wed, 19 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2016/10/19/my-linux-command/</guid>
      <description>稍微進階是對我來說啦 grep # 找該目錄底下所有出現&amp;#39;bob&amp;#39;的檔案 grep -r &amp;#39;bob&amp;#39; *# 找abc.txt內所有出現&amp;#39;bob&amp;#39;或&amp;#39;poyi&amp;#39;的內容 (| =&amp;gt; OR) grep -E &amp;#39;bob|poyi&amp;#39; abc.txt egrep &amp;#39;bob|poyi&amp;#39; abc.txt# 找abc.txt內所有出現&amp;#39;bob&amp;#39;及&amp;#39;poyi&amp;#39;的內容 (.* =&amp;gt; AND) grep -E &amp;#39;bob.*poyi|200.*poyi&amp;#39; abc.txt# 找abc.txt內沒有出現&amp;#39;bob&amp;#39;的內容 (NOT) grep -v &amp;#39;bob&amp;#39; abc.txt find 找檔案 # 在/home目錄下找檔名為production.log的檔案 find /home -name production.log find /home -iname production.log # 不分大小寫# 在/home目錄下找所有的log folder find /home -type d -name log locate 找檔案(查系統index，不是直接掃目錄) locate nginx.conf  Ctrl + c : 終止正在執行的程式 Ctrl + l : clear</description>
    </item>
    
    <item>
      <title>[Ubuntu] Linux 基本的安全設定</title>
      <link>https://blog.poyi.tw/blog/2016/08/25/linux-some-common-security-setting/</link>
      <pubDate>Thu, 25 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2016/08/25/linux-some-common-security-setting/</guid>
      <description>列幾個基本款常見的一些設定 ssh port更換到別的port # ssh port更換到別的port $ sudo vim /etc/ssh/sshd_config Port 1968 $ sudo service sshd restart 開始自動安全性更新 $ sudo apt-get install unattended-upgrades $ sudo dpkg-reconfigure -plow unattended-upgrades $ sudo vim /etc/apt/apt.conf.d/50unattended-upgrades ssh 登入盡量用 key-exchange 方式 fail2ban - 自動ban掉多次嘗試登入者 $ sudo apt-get install fail2ban # 保留原始conf檔，把設定都寫在.local $ sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local $ vim /etc/fail2ban/jail.local # 將enabled改成true [DEFAULT] ignoreip = 127.0.0.1/8 bantime = 600 findtime = 600 maxretry = 5 backend = auto enabled = true # 啟動 $ sudo service fail2ban start # 看目前狀態，目前有一個被ban $ sudo fail2ban-client status Status |- Number of jail: 1 `- Jail list: sshd # detail $ sudo fail2ban-client status sshd Status for the jail: sshd |- Filter | |- Currently failed: 1 | |- Total failed: 6 | `- File list: /var/log/auth.</description>
    </item>
    
    <item>
      <title>[Ubuntu] 自行簽署的SSL憑證及Nginx設定</title>
      <link>https://blog.poyi.tw/blog/2016/07/14/ssl-certificate-nginx-ubuntu-config/</link>
      <pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2016/07/14/ssl-certificate-nginx-ubuntu-config/</guid>
      <description>自簽SSL單純只是讓資料傳送時加密，避免使用明文傳輸資料而被直接監聽到封包
要上Production的話還是必須找SSL服務來簽
# openssl # 我習慣在nginx把ssl裝在opt/nginx底下 mkdir /opt/nginx/ssl sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /opt/nginx/ssl/nginx.key -out /opt/nginx/ssl/nginx.crt # 填寫基本資料 # Common Name 填 Domain Name 或 IP # 建立金鑰nginx.key及憑證nginx.crt# nginx.conf server { listen 80 default_server; # 將所有HTTP requests轉至HTTPS return 301 https://$host$request_uri; } server { listen 443 ssl default_server; ssl_certificate /opt/nginx/ssl/nginx.crt; ssl_certificate_key /opt/nginx/ssl/nginx.key; # 其他ssl參數設定 ... server_name default_server; root /home/path/rails/public; # &amp;lt;--- rails路徑 rails_env production; passenger_enabled on; }# 產dhparam -out sudo openssl dhparam -out /opt/nginx/ssl/dhparam.</description>
    </item>
    
    <item>
      <title>[Ethereum] 如何使用Windows來挖礦</title>
      <link>https://blog.poyi.tw/blog/2016/04/05/how-to-mine-ethereum-on-windows/</link>
      <pubDate>Tue, 05 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2016/04/05/how-to-mine-ethereum-on-windows/</guid>
      <description>1. 安裝geth 下載geth
解壓縮後不用執行放在C:\ (我放在E:\不過沒差)
建立錢包並設定密碼
以下指令都需要開command line(cmd)
# C:\ geth account new 同步所有交易
# C:\ # --cache=看你想分配多少RAM來sync。預設只有16MB geth --rpc --cache=8192 // 第一次似乎可以用geth &amp;ndash;rpc &amp;ndash;fast來快速sync完整node(沒試過)
2. 安裝mining軟體 下載mining軟體(載最下面的即可) 照一般安裝流程
安裝好後可以測設備的算力，正常來說是GPU比較快(AMD &amp;gt; nVidia)
# C:\Program Files\Ethereum (版號)\Release ethminer -G -M # GPU ethminer -M # CPU 3. 挖礦 挖礦前blockchain要先sync過，也就是&amp;rdquo;geth &amp;ndash;rpc&amp;rdquo;
看是要自己挖還是加入別人礦池
自己挖 # C:\Program Files\Ethereum (版號)\Release ethminer -G # GPU 加入礦池 需按照各大礦池的教學操作，基本上都不需要註冊，直接使用礦池提供的url+你的錢包地址來挖就行了
我這邊使用nanopool(另外還有dwarfpool/ethpool&amp;hellip;)
# C:\Program Files\Ethereum (版號)\Release // ethminer.exe http://asia1.nanopool.org:8888/YOUR_WALLET_ADDRESS -G ethminer.</description>
    </item>
    
    <item>
      <title>[Golang] Golang 101 入門筆記</title>
      <link>https://blog.poyi.tw/blog/2016/04/02/golang-begging/</link>
      <pubDate>Sat, 02 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2016/04/02/golang-begging/</guid>
      <description>Hello Go! // hello.go package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;hello, go!&amp;#34;) }$ go run hello.go Hello Go! 基本結構、定義變數 常數 // 常數 const identifier [type] = value const Pi = 3.14159 const Monday, Tuesday, Wednesday, Thursday, Friday, Saturday = 1, 2, 3, 4, 5, 6 const ( Unknown = 0 Female = 1 Male = 2 ) // &amp;#34;iota&amp;#34; 變數 // 變數 var identifier type / var identifier [type] = value var a int var b bool var str string var a int = 15 var i = 5 var b bool = false var str string = &amp;#34;Hello Go!</description>
    </item>
    
    <item>
      <title>[Bitcoin] 客製比特幣位址並匯入錢包</title>
      <link>https://blog.poyi.tw/blog/2016/03/05/generate-your-own-bitcoin-address/</link>
      <pubDate>Sat, 05 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2016/03/05/generate-your-own-bitcoin-address/</guid>
      <description>使用vanitygen客製比特幣位址 安裝vanitygen sudo apt-get install build-essential libssl-dev libpcre3-dev git clone https://github.com/samr7/vanitygen.git cd vanitygen make Generate Your Own Bitcoin Address  Base58 避免使用數字0和字母大寫O以及字母大寫I和字母小寫l 要使用該Address的話，記得備份好Privkey避免公開，擁有Privkey即等於擁有此Address發送權
# 指定開頭 $ ./vanitygen 1Bob Difficulty: 77178 Pattern: 1Bob Address: 1Bobnp85Ns6JUDaMntc672ZjfsWSzrUnZH Privkey: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX # 忽略大小寫 $ ./vanitygen -i 1boba Difficulty: 1100434 Pattern: 1boba Address: 1BoBAeQ6vEw2wCitEvRAXuSfRJfwuVGt1L Privkey: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX # 指定結尾 $ ./vanitygen -r bob$ Pattern: bob$ Address: 14a6Pw84woyKjysT6Uc9gJF2M8prwYtbob Privkey: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  將 Privkey 匯入Bitcoind錢包 大部分錢包軟體都會提供匯入Privkey的功能，但我這邊使用Bitcoind
# 先確認此Address狀態 $ bitcoin-cli validateaddress 1Bobnp85Ns6JUDaMntc672ZjfsWSzrUnZH { &amp;#34;isvalid&amp;#34;: true, &amp;#34;address&amp;#34;: &amp;#34;1Bobnp85Ns6JUDaMntc672ZjfsWSzrUnZH&amp;#34;, &amp;#34;scriptPubKey&amp;#34;: &amp;#34;76a91476816ee640da13a0d821d79a01892d8598288bb488ac&amp;#34;, &amp;#34;ismine&amp;#34;: false, &amp;#34;iswatchonly&amp;#34;: false, &amp;#34;isscript&amp;#34;: false } # &amp;#34;ismine&amp;#34;: false =&amp;gt; 代表此address還不是自己的# bitcoin-cli importprivkey &amp;lt;Privkey&amp;gt; [label] [rescan=true] # label 是指你要放入哪個account，預設都會有一個””空字串的account # rescan 填true的話，會去掃以前到現在所有的transaction確定此address是否有被使用過(但會跑很久) # 如果只是新address的話這邊填false就行了 $ bitcoin-cli importprivkey XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX “” false$ bitcoin-cli validateaddress 1Bobnp85Ns6JUDaMntc672ZjfsWSzrUnZH { &amp;#34;isvalid&amp;#34;: true, &amp;#34;address&amp;#34;: &amp;#34;1Bobnp85Ns6JUDaMntc672ZjfsWSzrUnZH&amp;#34;, &amp;#34;scriptPubKey&amp;#34;: &amp;#34;76a91476816ee640da13a0d821d79a01892d8598288bb488ac&amp;#34;, &amp;#34;ismine&amp;#34;: true, &amp;#34;iswatchonly&amp;#34;: false, &amp;#34;isscript&amp;#34;: false, &amp;#34;iscompressed&amp;#34;: true, &amp;#34;account&amp;#34;: &amp;#34;&amp;#34; } # &amp;#34;ismine&amp;#34;: true =&amp;gt; 現在此Address就是屬於你的 Reference:</description>
    </item>
    
    <item>
      <title>[Ubuntu] 架設 OpenVpn Server &amp; Client</title>
      <link>https://blog.poyi.tw/blog/2016/03/05/ubuntu-openvpn-server-client/</link>
      <pubDate>Sat, 05 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2016/03/05/ubuntu-openvpn-server-client/</guid>
      <description>OpenVpn apt-get update apt-get install openvpn easy-rsagunzip -c /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz &amp;gt; /etc/openvpn/server.conf vim /etc/openvpn/server.conf# /etc/openvpn/server.conf # dh dh1024.pem dh2048.pem ca ca.crt cert server.crt key server.key # 拿掉註解 push &amp;#34;redirect-gateway def1 bypass-dhcp&amp;#34; user nobody group nogroup # 補上8.8.8.8 push &amp;#34;dhcp-option DNS 8.8.8.8&amp;#34; ;push &amp;#34;dhcp-option DNS 208.67.222.222&amp;#34; ;push &amp;#34;dhcp-option DNS 208.67.220.220&amp;#34; #其他基本上維持預設即可 Packet Forwarding echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward vim /etc/sysctl.conf# 拿掉註解 net.ipv4.ip_forward=1 Uncomplicated Firewall ufw allow ssh ufw allow 1194/udp ufw allow 80 # 開外連進來所需要的port vim /etc/default/ufw# 將DROP改成ACCEPT DEFAULT_FORWARD_POLICY=&amp;#34;ACCEPT&amp;#34;vim /etc/ufw/before.</description>
    </item>
    
    <item>
      <title>[Ubuntu] 設定 PPPoE 固定IP</title>
      <link>https://blog.poyi.tw/blog/2016/01/17/ubuntu-setting-pppoe-static-ip/</link>
      <pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2016/01/17/ubuntu-setting-pppoe-static-ip/</guid>
      <description>一般設定IP會直接寫在/etc/network/interfaces 看是要static還是dynamic auto p1p1 iface p1p1 inet static address 192.168.1.100 netmask 255.255.255.0 gateway 192.168.1.1 而需要使用PPPoE 輸入電信商提供的帳號來登入時 #####帳號以中華電信為例
 xxxxxxxx@hinet.net 取得動態IP (原有帳號格式) xxxxxxxx@ip.hinet.net 取得固定IP 僅限一台電腦使用
$ sudo apt-get install pppoeconf $ sudo pppoeconf  接著照著說明下一步，輸入帳號密碼等等的，全部設定完即可使用
也可以看到/etc/network/interfaces被加了一些設定
Reference:
http://note.drx.tw/2008/08/networkpppoe-adsl.html</description>
    </item>
    
    <item>
      <title>[Ubuntu] 設定NTP校正時間</title>
      <link>https://blog.poyi.tw/blog/2016/01/17/ubuntu-setting-ntp-sync-time/</link>
      <pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2016/01/17/ubuntu-setting-ntp-sync-time/</guid>
      <description>校正系統時間 類似OTP(google authenticator)這種服務當你系統時間不對就完全不能用
$ date # 確認目前時間 $ dpkg -l | grep ntp # 檢查是否已安裝 $ sudo apt-get install ntp ntpdate $ vim /etc/ntp.conf # Specify one or more NTP servers. # Use servers from the NTP Pool Project. Approved by Ubuntu Technical Board # on 2011-02-08 (LP: #104525). See http://www.pool.ntp.org/join.html for # more information. # 加上 server tock.stdtime.gov.tw server watch.stdtime.gov.tw server time.stdtime.gov.tw server clock.stdtime.gov.tw server tick.stdtime.gov.tw $ sudo service ntp restart # ntp會自動校時 $ ntpdate time.</description>
    </item>
    
    <item>
      <title>[Ruby] AES 加密解密</title>
      <link>https://blog.poyi.tw/blog/2015/11/07/ruby-aes-encrypt-decrypt/</link>
      <pubDate>Sat, 07 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2015/11/07/ruby-aes-encrypt-decrypt/</guid>
      <description>###對稱金鑰加密：加解密使用的金鑰是同一把
 DES (Data Encryption Standard) AES (Advanced Encryption Standard)  ###非對稱金鑰加密系統(公開金鑰加密)，加解密不同把key(公鑰私鑰)
 RSA
$key = &amp;#34;自定key&amp;#34; # 可利用rails的sercret key(Rails.application.secrets.secret_key_base) $iv = &amp;#34;自定iv&amp;#34; # AES 加密 def aes_encrypt(data) cipher = OpenSSL::Cipher::AES128.new(:CBC) cipher.encrypt cipher.key = $key cipher.iv = $iv encrypted = cipher.update(data) + cipher.final encrypted_base64 = Base64.encode64(encrypted) return encrypted_base64 end # 解密  def aes_decrypt(encrypted_base64) encrypted = Base64.decode64(encrypted_base64) decipher = OpenSSL::Cipher::AES128.new(:CBC) decipher.decrypt decipher.key = $key decipher.iv = $iv data = decipher.update(encrypted) + decipher.</description>
    </item>
    
    <item>
      <title>[Rails] 各種update method</title>
      <link>https://blog.poyi.tw/blog/2015/07/11/rails-various-update-methods/</link>
      <pubDate>Sat, 11 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2015/07/11/rails-various-update-methods/</guid>
      <description>##正規Rails的更新 - update
會觸發validation、callback、也會更新updated_at
# update 寫法 (for 單筆) &amp;gt; Comment.last.update(message: &amp;#39;bbb&amp;#39;) (0.1ms) begin transaction SQL (0.4ms) UPDATE &amp;#34;comments&amp;#34; SET &amp;#34;message&amp;#34; = ?, &amp;#34;updated_at&amp;#34; = ? WHERE &amp;#34;comments&amp;#34;.&amp;#34;id&amp;#34; = ? [[&amp;#34;message&amp;#34;, &amp;#34;bbb&amp;#34;], [&amp;#34;updated_at&amp;#34;, &amp;#34;2015-07-11 09:42:02.303661&amp;#34;], [&amp;#34;id&amp;#34;, 200]] (9.1ms) commit transaction =&amp;gt; true ##相當於直接下SQL的更新 - update_columns, update_all
而 update_columns 及 update_all 是直接幫你下SQL更新欄位，會忽視Rails的validation，也沒有callback，updated_at也不會更新。所以最好是很確定要更新的值沒問題再使用這類語法。
# update_columns 寫法 (for 單筆) &amp;gt; Comment.where(:id =&amp;gt; 200).first.update_columns(message: &amp;#39;bbbbb&amp;#39;, post_id: 3) SQL (9.2ms) UPDATE &amp;#34;comments&amp;#34; SET &amp;#34;message&amp;#34; = &amp;#39;bbbbb&amp;#39;, &amp;#34;post_id&amp;#34; = 3 WHERE &amp;#34;comments&amp;#34;.</description>
    </item>
    
    <item>
      <title>[Mac] 三步驟純指令建立Ubuntu的USB隨身碟</title>
      <link>https://blog.poyi.tw/blog/2015/06/29/mac-build-ubuntu-flash-using-command/</link>
      <pubDate>Mon, 29 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2015/06/29/mac-build-ubuntu-flash-using-command/</guid>
      <description># 將載好的ubuntu.iso 轉成 ubuntu.dmg Bob:Downloads $ hdiutil convert -format UDRW -o ubuntu-14.04.2-server-amd64.dmg ubuntu-14.04.2-server-amd64.iso 正在讀取Driver Descriptor Map（DDM：0）⋯ 正在讀取Ubuntu-Server 14.04.2 LTS amd64 （Apple_ISO：1）⋯ 正在讀取Apple（Apple_partition_map：2）⋯ 正在讀取Ubuntu-Server 14.04.2 LTS amd64 （Apple_ISO：3）⋯ .............. 正在讀取EFI（Apple_HFS：4）⋯ ............... 正在讀取Ubuntu-Server 14.04.2 LTS amd64 （Apple_ISO：5）⋯ .............................................................................. 經過時間： 7.977s 速度：74.6Mbyte/秒 節省：0.0%# 找到你的usb隨身碟後卸載它 Bob:Downloads $ diskutil list /dev/disk0 ... /dev/disk1 ... /dev/disk2 #: TYPE NAME SIZE IDENTIFIER 0: FDisk_partition_scheme *8.1 GB disk2 1: Windows_FAT_32 ADATA UFD 8.1 GB disk2s1 Bob:Downloads $ diskutil unmountDisk /dev/disk2 Unmount of all volumes on disk2 was successful# dd 把資料寫入隨身碟 Bob:Downloads $ sudo dd if=ubuntu-14.</description>
    </item>
    
    <item>
      <title>[Rails] AJAX render errors in json</title>
      <link>https://blog.poyi.tw/blog/2015/06/12/rails-ajax-render-error-in-json/</link>
      <pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2015/06/12/rails-ajax-render-error-in-json/</guid>
      <description>// new.html.erb $.ajax({ url: URL, async:false, data:{ amount: 100, }, dataType:&amp;#39;json&amp;#39;, method:&amp;#39;post&amp;#39;, success:function(data){ // do success things  }, error:function(xhr){ var errors = $.parseJSON(xhr.responseText).errors alert(errors); } ); # orders_controller.rb  def create if amount &amp;lt; 100 render :json =&amp;gt; { :errors =&amp;gt; &amp;#34;金額不足&amp;#34; }, :status =&amp;gt; 422 return end end 當錯誤回傳時，使用422(Unprocessable Entity)來做error handling
Reference:
http://travisjeffery.com/b/2012/04/rendering-errors-in-json-with-rails/ http://stackoverflow.com/questions/16133923/400-vs-422-response-to-post-of-data</description>
    </item>
    
    <item>
      <title>資料被綁架軟體加密，要求贖金用比特幣支付</title>
      <link>https://blog.poyi.tw/blog/2015/04/18/all-your-important-files-are-encrypted/</link>
      <pubDate>Sat, 18 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2015/04/18/all-your-important-files-are-encrypted/</guid>
      <description>這篇單純紀錄一下被綁架後頁面的流程。
最近遇到幾間公司發現這種事，突然所有檔案被綁架軟體加密無法開啟，而桌面多了一份文字檔，裡面附上特殊網址及比特幣錢包位址…。(當然，這只是其中一款綁架軟體的方式)
{% img /images/poyi/bitcoin1.png &amp;lsquo;image&amp;rsquo; &amp;lsquo;images&amp;rsquo; %}
輸入它給的錢包地址登入後，就可以看到所要求的贖金或相關資料了
應該會有類似以下的字眼 (這邊贖金要求你付2.5顆比特幣)
All your important files are encrypted. At the moment, the cost of private key for decrypting your file is 2.5 BTC
而為了證明你付完贖金真的幫你解密，它還幫你解密其中一個的檔案讓你下載看看是否沒問題(如下圖下方的xlsx檔)… 不得不說還蠻貼心的…
{% img /images/poyi/bitcoin2.jpg &amp;lsquo;image&amp;rsquo; &amp;lsquo;images&amp;rsquo; %}
而聽說沒付指定的贖金，對方不但不解密還會提高贖金
所以如果資料沒備份又找不到解法，也許就甘願一點付錢吧…
算是這年頭支付太過方便的缺點吧
{% img /images/poyi/bitcoin3.png &amp;lsquo;image&amp;rsquo; &amp;lsquo;images&amp;rsquo; %}
而另外它也提供如何購買比特幣相關資訊…貼心再+1…
目前在台灣是可以直接去全家買會比較方便，這邊就請自行google :D

Reference:
http://buzzorange.com/techorange/2015/01/19/how-my-mom-got-hacked/
http://www.epochtimes.com/b5/15/4/9/n4407355.htm</description>
    </item>
    
    <item>
      <title>[Ruby] 教學 - 基本使用介紹2</title>
      <link>https://blog.poyi.tw/blog/2015/04/12/ruby-basic-2/</link>
      <pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2015/04/12/ruby-basic-2/</guid>
      <description>Define Methods # 基本的method定義 def temp puts 123 end temp() temp def temp(a,b,c) puts “#{a} , #{b}, #{c}” end temp(1,2,3) temp 1 , 2 , 3 def temp(a,b,c=99) # 第三個參數若沒傳入的話預設值為99 puts “#{a} , #{b}, #{c}” end temp() # wrong arguments (0 for 2..3) 錯誤訊息提示傳入值需要2~3個 temp(1,2) temp(1,2,3) def temp(a,b,c=99, *argv) ap [a,b,c,argv] end temp() # wrong arguments (0 for 2+) 錯誤訊息提示傳入值需要2個以上 temp(1,2,3,4,5,6,7,8)# 進階的method定義 (block) def temp(&amp;amp;block) end temp(1) #=&amp;gt; wrong number of arguments (1 for 0) &amp;amp;block不是傳入的參數 temp() #=&amp;gt; nil temp(){puts &amp;#34;temp&amp;#34;} #=&amp;gt; nil  # 當temp()後面有block時會把這一段code放置&amp;amp;block當中，但因為裡面沒有呼叫它執行所以nil def temp2(&amp;amp;abc) abc.</description>
    </item>
    
    <item>
      <title>[Ruby] 教學 - 基本使用介紹</title>
      <link>https://blog.poyi.tw/blog/2015/03/31/ruby-basic-1/</link>
      <pubDate>Tue, 31 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2015/03/31/ruby-basic-1/</guid>
      <description>Rails熟了一點後就會發現其實大部分都是學會怎麼用它，卻很吃Ruby本身的概念
未來讓以後開發不會這麼吃力，來整複習一下好了 :D
Everything is Ruby is an object Ruby 內皆為物件，無基本型別
# X.class，X.methods 的用法 123.methods #=&amp;gt; 123可用的method列表  123.class #=&amp;gt; Fixnum #知道class後就可以查doc  true.class #=&amp;gt; TrueClass  nil.class #=&amp;gt; NilClass &amp;gt; 2.even? =&amp;gt; true &amp;gt; 3.next =&amp;gt; 4 &amp;gt; -1.abs =&amp;gt; 1 ##基本使用
# 各種常見型別 123.class #integer 42343243243243243242343242344234234234.class #bignum  123.123.class #float  “123”.class #string  [].class #array  {}.class #hash  :abc.class #symbol  nil.class #nilClass  true.class #TrueClass false.</description>
    </item>
    
    <item>
      <title>[Ruby] 匯出txt檔</title>
      <link>https://blog.poyi.tw/blog/2014/05/06/ruby-txt-file/</link>
      <pubDate>Tue, 06 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2014/05/06/ruby-txt-file/</guid>
      <description>需要在正式環境上撈大量特定資料下來，又不想dump整份database，用ORM來把資料匯出成txt就很方便了 # 寫入txt all_users_mobile = User.where(&amp;#39;mobile like ?&amp;#39;, &amp;#39;+8869%&amp;#39;).select(:mobile).uniq # 建立txt並給予寫入權限 file = File.open(&amp;#39;mobile_tw.txt&amp;#39; , &amp;#39;w&amp;#39;) all_users_mobile.each do |mobile| file.puts mobile # 一行一筆mobile end # 記得要關掉 file.close# 讀取txt file = File.open(&amp;#39;mobile_tw.txt&amp;#39; , &amp;#39;r&amp;#39;) 100.times do file.readline end Reference:
http://ruby-doc.org/core-2.1.4/File.html</description>
    </item>
    
    <item>
      <title>[Ruby] 匯出批次csv檔</title>
      <link>https://blog.poyi.tw/blog/2014/05/06/ruby-csv-file/</link>
      <pubDate>Tue, 06 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2014/05/06/ruby-csv-file/</guid>
      <description>讀取或寫入csv在ruby都蠻方便的，只是編碼或格式要稍微注意一下
匯出csv header = [&amp;#39;name&amp;#39;,&amp;#39;money&amp;#39;,&amp;#39;age&amp;#39;] body = [&amp;#39;ruby&amp;#39;,&amp;#39;1000&amp;#39;,&amp;#39;18&amp;#39;]# export_to_csv_string 匯出csv的string格式再利用send_data下載 head = &amp;#39;EF BB BF&amp;#39;.split(&amp;#39; &amp;#39;).map{|a|a.hex.chr}.join() # 加入BOM，解決excel中文亂碼 csv_string = CSV.generate(csv = head) do |csv| csv &amp;lt;&amp;lt; header csv &amp;lt;&amp;lt; body end # &amp;gt; csv_string.encoding 執行這句會發現預設編碼為ACSII csv_string.force_encoding(&amp;#39;big5&amp;#39;) # BOM也可以這樣加 csv_string = &amp;#34;\xEF\xBB\xBF#{csv_string}&amp;#34;  # 若不需要調整格式就直接下載 send_data csv_string# export_to_csv 直接匯出檔案 require &amp;#39;csv&amp;#39; CSV.open(&amp;#34;export.csv&amp;#34;,&amp;#34;w&amp;#34;) do |csv| csv &amp;lt;&amp;lt; header csv &amp;lt;&amp;lt; body end 半形轉全形 在某些情況會需要轉出全形字元，照理說不用才對，可能是因為合作對方的系統太爛 其實也不太確定怎解，我單純用硬幹的方式
# convert_to_wide_word 大小寫英文數字轉全形字元 def self.convert_to_wide_word(text) text.</description>
    </item>
    
    <item>
      <title>[Ruby] require,load,include,extend</title>
      <link>https://blog.poyi.tw/blog/2014/03/16/ruby-require-load-include-extend/</link>
      <pubDate>Sun, 16 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2014/03/16/ruby-require-load-include-extend/</guid>
      <description>require vs load 首先require與load都是用來載入指定的檔案 差別在於使用require只會調用一次，且副檔名可省略，load則相反。
# random.rb $a = (rand * 10).floor# use_require.rb 產出的兩個值相同(只載入一次random.rb) require &amp;#34;./random&amp;#34; puts $a require &amp;#34;./random&amp;#34; # 此行無效果 puts $a# use_load.rb 產生的兩個值不一定相同 load &amp;#34;./random.rb&amp;#34; puts $a load &amp;#34;./random.rb&amp;#34; puts $a include vs extend include: 將目標當作instance來使用；並不直接擁有method，需建立一個實例後才能用 extend: 相當於把目標的code直接放進來；具有目標的class methods
# include_extend.rb module Say def say_hi puts &amp;#34;Hi!&amp;#34; end end class People include Say end class Person extend Say # 具有Say的method，可直接呼叫 end$ irb 001 &amp;gt; require &amp;#39;./include_extend.rb&amp;#39; =&amp;gt; true 002 &amp;gt; Person.</description>
    </item>
    
    <item>
      <title>[Mac] 直接在command line開啟sublime</title>
      <link>https://blog.poyi.tw/blog/2014/01/19/mac-directly-in-the-terminal-to-open-sublime/</link>
      <pubDate>Sun, 19 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2014/01/19/mac-directly-in-the-terminal-to-open-sublime/</guid>
      <description>ln -sv /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/subl subl test.rb git clone https://github.com/bitcoin/bitcoin.git subl bitcoin/ Reference:
https://gist.github.com/martinbuberl/5823ed247d279d1a2d06</description>
    </item>
    
    <item>
      <title>[Mac] Ruby on Rails 基本環境建置 - 10.9 Mavericks</title>
      <link>https://blog.poyi.tw/blog/2014/01/17/rails-mac-os-environment-build/</link>
      <pubDate>Fri, 17 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2014/01/17/rails-mac-os-environment-build/</guid>
      <description>是說終於買了mac，省去開箱文趕緊把環境用好來繼續練習Rails 但使用上還是有一點不習慣，會覺得有些地方也蠻不人性化，但相對穩定就是了
以下環境為OS X 10.9.1 Mavericks 1.安裝xcode-select Command line tool已經獨立出來，不需要安裝XCode了
$ xcode-select --install 如果安裝失敗的話也可以到這裡下載
2.安裝homebrew
$ ruby -e &amp;#34;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)&amp;#34; 3.安裝所需要的工具
$ brew install git 4.安裝RVM
$ curl -L https://get.rvm.io | bash -s stable 5.透過RVM來安裝RUBY
$ rvm install ruby 6.透過RVM來安裝RubyGems
$ rvm rubygems current 7.安裝Rails
$ gem install rails ===
 XCode:官方提供的一個IDE，主要用來開發IOS APP，不過它也包含了一些開發其他語言所需的環境 Homebrew: OSX 套件管理工具 RVM (Ruby Version Manager):Ruby版本管理工具，便於切換不同版本  Reference:
http://www.computersnyou.com/2025/2013/06/install-command-line-tools-in-osx-10-9-mavericks-how-to/ http://www.slideshare.net/marsz330/ruby-on-rails-for-mac</description>
    </item>
    
    <item>
      <title>[JavaScript] 中斷事件或動作的觸發</title>
      <link>https://blog.poyi.tw/blog/2014/01/13/javascript-triggered-interrupt-event-or-action/</link>
      <pubDate>Mon, 13 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2014/01/13/javascript-triggered-interrupt-event-or-action/</guid>
      <description>bubble up 冒泡 當底層的元件被觸發時，會將所屬的父元件會連帶被觸發 - 多層觸發 而要處理這問題通常會用到 stopPropagation() 或 preventDefault()
stopPropagation() 停止向上層bubble up，但仍然會觸發browser 看例子比較快 http://jsfiddle.net/dA6R3/1/
// 加入event.stopPropagation(); 當點擊下去時，就不會向上觸發其他動作 &amp;lt;div class=&amp;#34;p&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;a&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; $(&amp;#34;.p&amp;#34;).click(function(event){ alert(&amp;#34;p 外&amp;#34;); }); $(&amp;#34;.a&amp;#34;).click(function(event){ alert(&amp;#34;a 內&amp;#34;); event.stopPropagation(); }); &amp;lt;/script&amp;gt; preventDefault() 會將預設的動作停掉不讓它執行，不會觸發browser 看例子比較快 http://jsfiddle.net/88dcF/1/
# 加入event.preventDefault(); 當點擊下去時，就不會執行預設動作(連到GOOGLE) &amp;lt;a href=&amp;#34;http://www.google.com&amp;#34;&amp;gt;go to google&amp;lt;/a&amp;gt; &amp;lt;div id=&amp;#34;check&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; $(&amp;#34;a&amp;#34;).click(function(event) { event.preventDefault(); $(&amp;#34;&amp;lt;div&amp;gt;&amp;#34;).append(&amp;#34;Ya&amp;#34;).appendTo(&amp;#34;#check&amp;#34;); }); &amp;lt;/script&amp;gt; Reference:
http://www.neoease.com/stoppropagation-and-preventdefault-and-return-false/
http://yiyingloveart.blogspot.tw/2013/08/eventpreventdefaultreturn-false.html</description>
    </item>
    
    <item>
      <title>[Ruby] 例外處理</title>
      <link>https://blog.poyi.tw/blog/2013/12/23/ruby-exception-handling/</link>
      <pubDate>Mon, 23 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/12/23/ruby-exception-handling/</guid>
      <description>好像各語言都大同小異，try..catch..finally語法轉換一下就差不多了
例外處理 # begin..end當中的rescue begin # 有機會發生例外的code rescue # 發現例外後要執行的code ensure # 無論是否例外都會執行的code end 而當例外發生時，如果沒有指定變數，Ruby會將錯誤資訊存放至$!及$@
 $! (例外物件)  .class .message .backtrace (等同於$@)  $@ (例外的位置資訊)
# example begin abc = 1 / 0 rescue =&amp;gt; ex puts &amp;#34;Except class: #{ex.class}&amp;#34; puts &amp;#34;Except message: #{ex.message}&amp;#34; ensure puts &amp;#39;Always print&amp;#39; end Except class: ZeroDivisionError Except message: divided by 0 Always print =&amp;gt; nil  Reference: http://blog.tonycube.com/2011/07/ruby8.html</description>
    </item>
    
    <item>
      <title>[Ruby] Functions for Numbers</title>
      <link>https://blog.poyi.tw/blog/2013/12/18/ruby-functions-for-numbers/</link>
      <pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/12/18/ruby-functions-for-numbers/</guid>
      <description># Math &amp;gt; 2 ** 3 # 次方 =&amp;gt; 8 =begin Addition (+) Subtraction (-) Multiplication (*) Division (/) Exponentiation (**) Modulo (%) =end&amp;gt; 9.9.integer? =&amp;gt; false &amp;gt; -5.abs =&amp;gt; 5 &amp;gt; 5.6.round # 取最近的整數/四捨五入 =&amp;gt; 6 &amp;gt; 9.9.floor	# 取整數/無條件捨去 =&amp;gt; 9 &amp;gt; 2312.22.ceil # 取整數/無條件進位 =&amp;gt; 2313 &amp;gt; 2.next =&amp;gt; 3# 二元運算 n &amp;amp; num n | num n ^ num (XOR) n &amp;lt;&amp;lt; num (向左位移) n &amp;gt;&amp;gt; num (向右位移) Reference: http://www.</description>
    </item>
    
    <item>
      <title>[Ruby] 變數</title>
      <link>https://blog.poyi.tw/blog/2013/12/14/ruby-is-a-small-note/</link>
      <pubDate>Sat, 14 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/12/14/ruby-is-a-small-note/</guid>
      <description>Ruby 有一個重要特性 Convention Over Configuration
希望去做到一個約定成俗的習慣/慣例，省去過多的設定，讓程式更為簡潔。(ex:route maping)
Ruby命名也有一定的慣例
 $name:全域變數 @name:實例變數，作用域僅限定於 self 指示的物件 name:區域變數(小寫字母或底線開頭；初始化前並沒有 nil 值) Name:常數(大寫開頭；重覆定義時會出現警告)
# 全域變數 vs 實例變數 vs 區域變數 ruby&amp;gt; $foo =&amp;gt; nil ruby&amp;gt; @foo =&amp;gt; nil ruby&amp;gt; foo ERR: (eval):1: undefined local variable or method `foo&amp;#39; for main(Object) ruby&amp;gt; Foo = 2 =&amp;gt; 2 ruby&amp;gt; Foo = 3 =&amp;gt; warning: alread initialized constant Foo =&amp;gt; 3  </description>
    </item>
    
    <item>
      <title>[Ruby] and與&amp;&amp;的差別</title>
      <link>https://blog.poyi.tw/blog/2013/12/09/ruby-and/</link>
      <pubDate>Mon, 09 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/12/09/ruby-and/</guid>
      <description>在Ruby中的邏輯運算有兩組，[!,&amp;amp;&amp;amp;,||]及[not,and,or]
*	[!,&amp;amp;&amp;amp;,||]	* higher precedence *	[=,%=,~=,/=] * between this two *	[not,and,or] * lower precedence * 優先權：&amp;amp;&amp;amp;　→　||　→　and　＝　or 。 * &amp;amp;&amp;amp; 或 || 會將符號前後方都認定為boolean(true,false)  # &amp;amp;&amp;amp; 與 and 的比較 &amp;gt; a = true &amp;amp;&amp;amp; false =&amp;gt; false &amp;gt; a =&amp;gt; false &amp;gt; a = true and false =&amp;gt; false &amp;gt; a =&amp;gt; true# || 與 or 的比較 &amp;gt; a = false || true =&amp;gt; true &amp;gt; a =&amp;gt; true &amp;gt; a = false or true =&amp;gt; true &amp;gt; a =&amp;gt; false# 總結，布林運算用[!</description>
    </item>
    
    <item>
      <title>[Rails] Bootstrap for Rails</title>
      <link>https://blog.poyi.tw/blog/2013/12/07/rails-bootstrap-for-rails/</link>
      <pubDate>Sat, 07 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/12/07/rails-bootstrap-for-rails/</guid>
      <description># add to gemfile.rb and remember to bundle install gem &amp;#39;bootstrap-sass&amp;#39;# 新增一個app/assets/stylesheets/styles.css.scss並將bootstrap import @import &amp;#39;bootstrap&amp;#39;# app/assets/javascripts/application.js 加入bootstrap //= require bootstrap 這樣就可以用了yaya</description>
    </item>
    
    <item>
      <title>[Rails] 打包Gem套件</title>
      <link>https://blog.poyi.tw/blog/2013/12/02/rails-gem/</link>
      <pubDate>Mon, 02 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/12/02/rails-gem/</guid>
      <description>當我們要安裝別人寫好的Library、API時，通常會
# Gemfile gem &amp;#39;google-translate&amp;#39; 或是
$ gem install google-translate 打包gem 而當我們要打包自己的gem，自用或供他人使用，該怎麼做？
# 用bundle 生成gem結構 $ bundle gem bob_test_plugin# 建立gem gem build bob_test_plugin.gemspec 此時會生成 bob_test_plugin-0.0.1.gem
# 安裝gem $ sudo gem install bob_test_plugin-0.0.1.gem# 在rails c下測試gem irb&amp;gt;require &amp;#39;bob_test_plugin&amp;#39; =&amp;gt; true irb&amp;gt;BobTestPlugin.name =&amp;gt; &amp;#34;BobTestPlugin&amp;#34; 發佈在 RubyGems.org 申請RubyGems帳號
# 發佈 $ gem push bob_test_plugin-0.0.1.gem Reference: http://blog.xdite.net/posts/2012/01/04/how-to-pack-a-gem http://jex.logdown.com/posts/164687-ruby-build-his-own-gem-packages</description>
    </item>
    
    <item>
      <title>[APT] 進階持續性滲透攻擊 筆記</title>
      <link>https://blog.poyi.tw/blog/2013/11/22/apt/</link>
      <pubDate>Fri, 22 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/11/22/apt/</guid>
      <description>Advanced Persistent Threat Advanced: 精心策劃的進階攻擊手法，並採用多元手段嘗試入侵。 Persistent: 進行一段長時間的埋伏並監視網路使用習慣，遵循low and slow、以不被發現為原則。 通常攻擊者為有組織、計劃性的團體，嘗試竊取特定目標機密。
主要攻擊目標  依組職：政治、軍事、企業 依國家：中國、美國、印度  常見手法 Internet Malware Infection - 下載驅動程式 - Email附件 - 非正式授權軟體 - DNS中毒
Physical Malware Infection - USB
External Attacks - 駭客入侵 - 漏洞攻擊
APT五種典型的特色：  高度針對性 具有潛伏並保持低調的技術能力 擁有資料情報分析的能力 擁有多樣工具的多重面向攻擊方式 資金充裕  而成功入侵潛伏以後，會利用內部環境向上取得更高權限的帳號 也可透過掃描漏洞軟體看是否該組織資安上是否有漏洞
# 掃描漏洞.. Default Password (root) for &amp;#39;root&amp;#39; Account Unpassworded for &amp;#39;sa&amp;#39; Account 駭客攻擊可以想成是流行性感冒，一直都會有新的流感(攻擊手法)，是不可避免到100%，但只要一個組織的資安體制建全、員工都有資安概念，就不容易受害。
Reference: IThome「防駭演練與危機處理」研習會</description>
    </item>
    
    <item>
      <title>[Rails] ActiveRecord</title>
      <link>https://blog.poyi.tw/blog/2013/11/20/rails-activerecord/</link>
      <pubDate>Wed, 20 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/11/20/rails-activerecord/</guid>
      <description># Model relation class Boss &amp;lt; ActiveRecord::Base has_one :employee has_many :employees end class Employee &amp;lt; ActiveRecord::Base belongs_to :boss end# 常用參數 class Employee &amp;lt; ActiveRecord::Base belongs_to :manager, :class_name =&amp;gt; &amp;#34;User&amp;#34;, :foreign_key =&amp;gt; &amp;#34;manager_id&amp;#34; ,:order =&amp;gt; &amp;#34;id desc&amp;#34; end # class_name =&amp;gt; &amp;#34;User&amp;#34; 變更關聯class name # :foreign_key =&amp;gt; &amp;#34;manager_id&amp;#34;變更關聯foreign key,預設為class_id # :order =&amp;gt; &amp;#34;id desc&amp;#34; 排序# 資料驗證 class Group &amp;lt; ActiveRecord::Base validates :name, presence: true # 此欄位必填 validates :name, :length =&amp;gt; { :minimum =&amp;gt; 2 } validates :bio, :length =&amp;gt; { :maximum =&amp;gt; 500 } validates :password, :length =&amp;gt; { :in =&amp;gt; 6.</description>
    </item>
    
    <item>
      <title>[Rails] RESTful</title>
      <link>https://blog.poyi.tw/blog/2013/11/14/rails-rest/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/11/14/rails-rest/</guid>
      <description>&amp;lt;table border=&amp;#34;1&amp;#34;&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;Action&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;helpers&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Verb&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;Path&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;index&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;groups_path&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;GET&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;/groups&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;show&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;group_path(@group)&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;GET&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;/groups/1&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;new&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;new_group_path&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;GET&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;/groups/new&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;create&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;groups_path&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;POST&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;/groups&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;edit&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;edit_group_path(@group)&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;GET&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;/groups/1/edit&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;update&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;group_path(@group)&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;PUT&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;/groups/1&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;destroy&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;group_path(@group)&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;DELETE&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;/groups/1&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/table&amp;gt;</description>
    </item>
    
    <item>
      <title>[Rails] Connect SQL Server</title>
      <link>https://blog.poyi.tw/blog/2013/10/30/rails-sql-server/</link>
      <pubDate>Wed, 30 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/10/30/rails-sql-server/</guid>
      <description>看到官方提供的adpter..真的不知道怎麼下手.. 魯蛇無誤
Ubuntu Connect to SQL Server 想在Unix、Linux環境上，存取SQL Server似乎大多都使用FreeTDS
# 安裝FreeTDS $ sudo apt-get install freetds-dev freetds-bin tdsodbc# 檢查FreeTDS版本資訊 $ tsql -C # 這時候就可以Connect SQL Server $ tsql -H (SQL Server IP) -p 1433 -U (account) －P (password) –D (datebase name)# 直接下TSQL，這邊要用go才會執行 $ select * from Team $ go 這邊代表已能在Ubuntu Connect SQL Server 但Rails還需要其他套件
Rails Connect to SQL Server (Error) # 安裝tiny_tds、sqlserver adapter $ sudo gem install tiny_tds $ sudo gem install activerecord-sqlserver-adapter 修改DateBase.</description>
    </item>
    
    <item>
      <title>[Rails] CRUD 備忘</title>
      <link>https://blog.poyi.tw/blog/2013/10/30/rails-crud/</link>
      <pubDate>Wed, 30 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/10/30/rails-crud/</guid>
      <description># index &amp;lt;%= link_to &amp;#39;list&amp;#39;, teams_path %&amp;gt; # GET def index @teams = Team.all end# show &amp;lt;%= link_to &amp;#39;show&amp;#39;, team_path(team) %&amp;gt; # GET def show @team = Team.find(params[:id]) end# new &amp;lt;%= link_to &amp;#39;new Team&amp;#39;, new_team_path %&amp;gt; def new @team = Team.new end# create &amp;lt;%= form_for @team, :url =&amp;gt; teams_path do |t| %&amp;gt; #In a form, the default request method is POST &amp;lt;%= t.text_field :name %&amp;gt; &amp;lt;%= t.text_field :year %&amp;gt; &amp;lt;%= t.</description>
    </item>
    
    <item>
      <title>[VMware] VCenter Cluster 練習筆記</title>
      <link>https://blog.poyi.tw/blog/2013/10/25/vmware-vcenter-cluster-exercises/</link>
      <pubDate>Fri, 25 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/10/25/vmware-vcenter-cluster-exercises/</guid>
      <description>vSphere ESXi: 整個虛擬化平台，算是一個作業系統 vSphere Client: 操作VM用的軟體(遠端連線到ESXi) vCenter: 可統一管理，支援ADD 容錯
&amp;ndash;VLAN 45(橘底) - 準備兩台電腦，灌上vSphere ESXi，設定名稱、IP、VLAN - 分別灌上不同OS，其中一台用來架AD網域，並將每個OS加入網域 - 找一台安裝vCenter，安裝後直接連入這台就可直接操作其他OS
Cluster
註記： HT Hyper-threading 可將核心分成兩個序列在處理 cpu數核心數(2)(HT)=邏輯核心 硬碟分區格式 GPT VS MBR：MBR上限為2T(超過2T以上的空間無法分配出來)</description>
    </item>
    
    <item>
      <title>[Rails] 小技巧</title>
      <link>https://blog.poyi.tw/blog/2013/10/16/rails-tips/</link>
      <pubDate>Wed, 16 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/10/16/rails-tips/</guid>
      <description> .erb的註解 &amp;lt;% #註解可寫在井號後面  %&amp;gt; &amp;lt;% if false %&amp;gt; 或寫在這 &amp;lt;% end  %&amp;gt; .rb的註解 # 一般只用單行註解 =begin 多行註解比較少見 =end  檢查自己寫了多少code $ bundle exec rake stats $ rake routes </description>
    </item>
    
    <item>
      <title>[VMware] VCenter 80 Port 已被使用</title>
      <link>https://blog.poyi.tw/blog/2013/10/14/vmware-vcenter-80-port-is-already-in-use/</link>
      <pubDate>Mon, 14 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/10/14/vmware-vcenter-80-port-is-already-in-use/</guid>
      <description>在嘗試安裝vCenter時，中途出現了「VMware VirtualCenter HTTP Port: 80」
原因是vCenter自動安裝時會把SQL Server及.NET Framework相關的元件裝上，導致IIS佔用了80Port。
解法之一就是直接在Roles裡把IIS移掉就行了(想在vCenter上使用IIS就要另求解了)

Reference: http://blog.xuite.net/cadmus.lin/yo/43386562-%E3%80%90%E7%B3%BB%E3%80%91%E5%A6%82%E4%BD%95%E6%9F%A5%E8%A9%A2%E5%93%AA%E5%80%8B%E7%A8%8B%E5%BC%8F%E4%BD%94%E7%94%A8%E4%BA%86%E6%8C%87%E5%AE%9APort</description>
    </item>
    
    <item>
      <title>[Rails] 基本概念（待補）</title>
      <link>https://blog.poyi.tw/blog/2013/10/07/ruby-basic/</link>
      <pubDate>Mon, 07 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/10/07/ruby-basic/</guid>
      <description># config/database.yml development: # 開發用 adapter: sqlite3 database: db/development.sqlite3 pool: 5 timeout: 5000 test: # 測試用 adapter: sqlite3 database: db/development.sqlite3 pool: 5 timeout: 5000 production: # 上線用 adapter: sqlite3 database: db/development.sqlite3 pool: 5 timeout: 5000# config/routes.rb get &amp;#34;welcome&amp;#34; =&amp;gt; &amp;#34;welcome#index&amp;#34; # 代表http://localhost:3000/welcome 會對應到 welcome Controller的index Action。  resources :events # 會自動生成四個四個命名路由(named routes)，搭配四個HTTP動詞，對應到七個Actions，如下： get &amp;#39;/events&amp;#39; =&amp;gt; &amp;#34;events#index&amp;#34;, :as =&amp;gt; &amp;#34;events&amp;#34; post &amp;#39;/events&amp;#39; =&amp;gt; &amp;#34;events#create&amp;#34;, :as =&amp;gt; &amp;#34;events&amp;#34; get &amp;#39;/events/:id&amp;#39; =&amp;gt; &amp;#34;events#show&amp;#34;, :as =&amp;gt; &amp;#34;event&amp;#34; put &amp;#39;/events/:id&amp;#39; =&amp;gt; &amp;#34;events#update&amp;#34;, :as =&amp;gt; &amp;#34;event&amp;#34; delete &amp;#39;/events/:id&amp;#39; =&amp;gt; &amp;#34;events#destroy&amp;#34;, :as =&amp;gt; &amp;#34;event&amp;#34; get &amp;#39;/events/new&amp;#39; =&amp;gt; &amp;#34;events#new&amp;#34;, :as =&amp;gt; &amp;#34;new_event&amp;#34; get &amp;#39;/events/:id/edit&amp;#39; =&amp;gt; &amp;#34;events#edit&amp;#34;, :as =&amp;gt; &amp;#34;edit_event&amp;#34; # get 是純讀取資料，對資料不會有任何影響，所以get資料可以回上一頁、refresh都ok；post則反之。 # HTML只有get、post，而Rails在post加上隱藏參數_method=PUT、_method=DELETE，就多了put、delete能用了。# &amp;lt;% 執行但不輸出 # &amp;lt;%= 輸出值 &amp;lt;% @people.</description>
    </item>
    
    <item>
      <title>[C#]  Delegate 委派</title>
      <link>https://blog.poyi.tw/blog/2013/10/04/c-delegate-delegate/</link>
      <pubDate>Fri, 04 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/10/04/c-delegate-delegate/</guid>
      <description>Delegate 是 C# 的特殊型別，用來定義方法（method/function）的 signature，delegate 的實體（instance）可以存放一或多個符合該 signature 的方法。這樣講也許還是鴨子聽雷，不如我們實際來感受一下吧！ delegate實例獨立於它所封裝的方法的類 這邊在個multicst delegate的例子 using System;
class MulticastTester { delegate void Greeting(); public static void Main() { Greeting myGreeting = new Greeting(SayThankYou); Console.WriteLine(&amp;#34;My single greeting:&amp;#34;); myGreeting(); Greeting yourGreeting = new Greeting(SayGoodMorning); Console.WriteLine(&amp;#34;\nYour single greeting:&amp;#34;); yourGreeting(); Greeting ourGreeting = myGreeting + yourGreeting; Console.WriteLine(&amp;#34;\nOur multicast greeting:&amp;#34;); ourGreeting(); ourGreeting += new Greeting(SayGoodnight); Console.WriteLine(&amp;#34;\nMulticast greeting which includes Goodnight:&amp;#34;); ourGreeting(); ourGreeting = ourGreeting - yourGreeting; Console.WriteLine(&amp;#34;\nMulticast greeting without your greeting:&amp;#34;); ourGreeting(); ourGreeting -= myGreeting; Console.</description>
    </item>
    
    <item>
      <title>[ASP.NET] Connect to SQL Server</title>
      <link>https://blog.poyi.tw/blog/2013/09/30/aspnet-connect-to-sql-server/</link>
      <pubDate>Mon, 30 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/09/30/aspnet-connect-to-sql-server/</guid>
      <description>最陽春的寫法
// 用SQL驗證來登入 string QueryString = &amp;#34;Data Source=xxxx;Initial Catalog=xxxx;User ID=xxxx;Password=xxxx&amp;#34;; // QUERY SqlConnection conn = new SqlConnection(QueryString); conn.Open(); sqlStr = &amp;#34;SELECT name FROM Employee&amp;#34;; SqlCommand cmd = new SqlCommand(sqlStr, conn); SqlDataReader dr = cmd.ExecuteReader(); while (dr.Read()) { // 將找到的值取出來  string user = dr[&amp;#34;name&amp;#34;].ToString(); //... } conn.Close(); // UPDATE INSERT DELETE SqlConnection conn = new SqlConnection(QueryString); conn.Open(); sqlStr = &amp;#34;UPDATE Employee SET name = &amp;#39;Bob&amp;#39;&amp;#34;; SqlCommand cmd = new SqlCommand(sqlStr, conn); cmd.</description>
    </item>
    
    <item>
      <title>[C#] IEnumerable vs IQueryable</title>
      <link>https://blog.poyi.tw/blog/2013/09/30/c-ienumerable/</link>
      <pubDate>Mon, 30 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/09/30/c-ienumerable/</guid>
      <description>在linq的使用上，IEnumerable是不可或缺的泛型介面 像是foreach迴圈就是利用IEnumerable的特性(MoveNext)來實現逐一檢查。
而IQueryable又繼承了IEnumerable&amp;hellip;
兩者的差別從概念上來說： IEnumerable:先將查詢的值取出，再一層一層做篩選。 IQueryable:把全部Linq翻成T-SQL，直到真正要使用時才去執行。
// IEnumerable // list1 IEnumerable&amp;lt;Employee&amp;gt; list1 = myDB.Employees.Where(p =&amp;gt; p.Name.StartsWith(&amp;#34;S&amp;#34;)); list1 = list1.Take&amp;lt;Employee&amp;gt;(10); // list2 IQueryable&amp;lt;Employee&amp;gt; list2 = myDB.Employees.Where(p =&amp;gt; p.Name.StartsWith(&amp;#34;S&amp;#34;)); list2 = list2.Take&amp;lt;Employee&amp;gt;(10); // list1 SELECT [t0].[EmpID], [t0].[EmpName], [t0].[Salary] FROM [Employee] AS [t0] WHERE [t0].[EmpName] LIKE @p0 // list2 SELECT TOP 10 [t0].[EmpID], [t0].[EmpName], [t0].[Salary] FROM [Employee] AS [t0] WHERE [t0].[EmpName] LIKE @p0 可以看到 IQueryable 在執行時直接向SQL要求TOP 10；而 IEnumerable 則是把全部撈出來再做一些篩選。
Reference: http://msdn.microsoft.com/zh-tw/library/ttw7t8t6.ASPX http://www.cnblogs.com/seebook/archive/2009/02/21/1395310.html http://www.dotnet-tricks.com/Tutorial/linq/I8SY160612-IEnumerable-VS-IQueryable.html</description>
    </item>
    
    <item>
      <title>[ASP.NET] Linq 動態條件搜尋</title>
      <link>https://blog.poyi.tw/blog/2013/09/29/aspnet-linq-dynamic-conditions/</link>
      <pubDate>Sun, 29 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/09/29/aspnet-linq-dynamic-conditions/</guid>
      <description>一般Linq在多種動態條件的組合時會顯得比較麻煩，要額外加很多if else判斷式來達成 而「PredicateBuilder」可以解決這些麻煩，原理上是將where的條件獨立出來
static void linqPB() { var list = new List&amp;lt;string&amp;gt; { &amp;#34;apple&amp;#34;, &amp;#34;bob&amp;#34;, &amp;#34;coco&amp;#34;, &amp;#34;durex&amp;#34;, &amp;#34;enter&amp;#34;, &amp;#34;fuck&amp;#34;}; var searchKeyword = new List&amp;lt;string&amp;gt; { &amp;#34;o&amp;#34;, &amp;#34;e&amp;#34; }; var predicate = PredicateBuilder.False&amp;lt;string&amp;gt;(); foreach (var word in searchKeyword) { var temp = word; // 避免參考到相同變數位址  predicate = predicate.Or(p =&amp;gt; p.Contains(temp)); } var qry = list.Where(predicate.Compile()); foreach (var item in qry) { Console.WriteLine(item); } Console.Read(); } // result: apple bob coco durex enter  主要的重點如下，將條件放入xxx</description>
    </item>
    
    <item>
      <title>[C#] 字串補零</title>
      <link>https://blog.poyi.tw/blog/2013/09/23/aspnet-string-is-padded-with-zeros/</link>
      <pubDate>Mon, 23 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/09/23/aspnet-string-is-padded-with-zeros/</guid>
      <description>最近常常手動新增假員工AD帳號來測我的程式 在嘗試跑程式step by step來測試時，想說奇怪怎麼假帳號會有電腦資產 原來這帳號跟設計部門的元老經理的員工工號重複了&amp;hellip; 還好有及時發現沒有把程式執行完，不然IT部門就要起飛了&amp;hellip;
所以想說寫個迴圈來測是不是有其他工號也有重複的案例 而工號欄位都是五位數(BOB00001~BOB99999) 像我的工號是4104需要補足五位數 有三種方式：
int myEmpNo = 4104; empNo.ToString(&amp;quot;00000&amp;quot;); empNo.ToString(&amp;quot;D5&amp;quot;); empNo.ToString().PadLeft(5,&#39;0&#39;); // 04104  查了才知道原來ToString蠻方便的，有些好用的例子
empNo.ToString(&amp;quot;BOB00000&amp;quot;); // BOB04104 empNo.ToString(&amp;quot;C&amp;quot;); // NT$4,104.00 empNo.ToString(&amp;quot;C&amp;quot;, new System.Globalization.CultureInfo(&amp;quot;en-US&amp;quot;)); $4,104.00 int myPhoneNo =123456789; myPhoneNo.ToString(&amp;quot;(##) ###-####&amp;quot;); // (12) 345-6789  PadLeft ：字串向右靠齊，將指定字元填滿左邊。 PadRight：字串向左靠齊，將指定字元填滿右邊。
Reference: http://msdn.microsoft.com/zh-tw/library/0c899ak8(v=vs.95).aspx http://www.dotblogs.com.tw/ethon.chi/archive/2010/09/27/17917.aspx</description>
    </item>
    
    <item>
      <title>[ASP.NET] 檔案資料夾存取</title>
      <link>https://blog.poyi.tw/blog/2013/09/18/aspnet-archive-folder-access/</link>
      <pubDate>Wed, 18 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/09/18/aspnet-archive-folder-access/</guid>
      <description>刪除
 System.IO.File.Delete(filePath); System.IO.Directory.Delete(folderPath);  搬移
 System.IO.File.Move(sourceFilePath, destinationFilePath); System.IO.Directory.Move(sourceFolderPath, destinationFolderPath);  複製
 System.IO.File.Copy(sourceFilePath, destinationFilePath, true); System.IO.Directory.Copy(sourceFolderPath, destinationFolderPath, true);// true表示是否覆寫  取得該目標下所有檔案
 string[] files = System.IO.Directory.GetFiles(folderPath);  比較需要注意的是做任何動作之前，都要需要先檢查目標是否存在，否則會跳出錯誤。
這樣也一篇…</description>
    </item>
    
    <item>
      <title>[jQuery] Selector</title>
      <link>https://blog.poyi.tw/blog/2013/09/15/jquery-selector/</link>
      <pubDate>Sun, 15 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/09/15/jquery-selector/</guid>
      <description>jQuery物件有下列三種： $(&amp;ldquo;a&amp;rdquo;)　$(&amp;ldquo;table&amp;rdquo;)　$(&amp;ldquo;div&amp;rdquo;)　:直接指定Tag類別
$(&amp;ldquo;#myTable&amp;rdquo;)　:直接指定ID
$(&amp;ldquo;.clsInput&amp;rdquo;)　:指定使用此CSS的元件

jQuery Selector 常用清單   選擇器 實例 選取   * $(&amp;quot;*&amp;quot;) 所有元素   #id $(&amp;quot;#lastname&amp;quot;) id=&amp;quot;lastname&amp;quot; 的元素   .class $(&amp;quot;.intro&amp;quot;) 所有 class=&amp;quot;intro&amp;quot; 的元素   element $(&amp;quot;p&amp;quot;) 所有 &amp;lt;p&amp;gt; 元素   .class.class $(&amp;quot;.intro.demo&amp;quot;) 所有 class=&amp;quot;intro&amp;quot; 且 class=&amp;quot;demo&amp;quot; 的元素   &amp;nbsp; &amp;nbsp; &amp;nbsp;   :first $(&amp;quot;p:first&amp;quot;) 第一個 &amp;lt;p&amp;gt; 元素   :last $(&amp;quot;p:last&amp;quot;) 最後一個 &amp;lt;p&amp;gt; 元素   :even $(&amp;quot;tr:even&amp;quot;) 所有偶數 &amp;lt;tr&amp;gt; 元素   :odd $(&amp;quot;tr:odd&amp;quot;) 所有奇數 &amp;lt;tr&amp;gt; 元素   &amp;nbsp; &amp;nbsp; &amp;nbsp;   :eq(index) $(&amp;quot;ul li:eq(3)&amp;quot;) 清單中的第四個元素（index 從 0 開始）   :gt(no) $(&amp;quot;ul li:gt(3)&amp;quot;) 列出 index 大於 3 的元素   :lt(no) $(&amp;quot;ul li:lt(3)&amp;quot;) 列出 index 小於 3 的元素   :not(selector) $(&amp;quot;input:not(:empty)&amp;quot;) 所有不為空的 input 元素   &amp;nbsp; &amp;nbsp; &amp;nbsp;   :header $(&amp;quot;:header&amp;quot;) 所有標題元素 &amp;lt;h1&amp;gt; - &amp;lt;h6&amp;gt;   :animated &amp;nbsp; 所有動畫元素   &amp;nbsp; &amp;nbsp; &amp;nbsp;   :contains(text) $(&amp;quot;:contains(&#39;W3School&#39;)&amp;quot;) 包含指定字串的所有元素   :empty $(&amp;quot;:empty&amp;quot;) 無子（元素）節點的所有元素   :hidden $(&amp;quot;p:hidden&amp;quot;) 所有隱藏的 &amp;lt;p&amp;gt; 元素   :visible $(&amp;quot;table:visible&amp;quot;) 所有可見的表格   &amp;nbsp; &amp;nbsp; &amp;nbsp;   s1,s2,s3 $(&amp;quot;th,td,.</description>
    </item>
    
    <item>
      <title>[jQuery] 入門</title>
      <link>https://blog.poyi.tw/blog/2013/09/15/jquery/</link>
      <pubDate>Sun, 15 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/09/15/jquery/</guid>
      <description>jQuery 是一套 JavaScript 的 Library，目的是簡化dom的操作，也可以說是簡化HTML與JavaScript之間的操作
基本規則：jQuery物件.方法( ).方法( )
具名函數
var person = new Object(); person.Name = &amp;quot;Bob&amp;quot;; person.Speak = say; function say(msg) { alert(this.Name + &amp;quot;: &amp;quot; + msg); } person.Speak(&amp;quot;Fuck You Jex&amp;quot;);  不具名函數
var person = new Object(); person.Name = &amp;quot;Bob&amp;quot;; person.Speak = function (msg) { alert(this.Name + &amp;quot;: &amp;quot; + msg); } person.Speak(&amp;quot;Fuck You Jex&amp;quot;);  Reference: http://msdn.microsoft.com/zh-tw/asp.net/dd452439.aspx</description>
    </item>
    
    <item>
      <title>[ASP.NET] 存取AD網域</title>
      <link>https://blog.poyi.tw/blog/2013/09/12/aspnet-access-to-ad-domain/</link>
      <pubDate>Thu, 12 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/09/12/aspnet-access-to-ad-domain/</guid>
      <description>透過AD網域來存取帳號資料 查詢資料 string QueryString = &amp;#34;LDAP://網域&amp;#34;; DirectoryEntry de = new DirectoryEntry(QueryString,adminAccount,adminPassword); DirectorySearcher ds = new DirectorySearcher(de); SearchResultCollection Results = null; // 設定查詢條件：依姓名及工號查詢  ds.Filter = @&amp;#34;(&amp;amp;(samaccountname=&amp;#34; + employeeName + &amp;#34;)(Description=&amp;#34; + employeeNo + &amp;#34;))&amp;#34;; // 將查詢結果放入Results  Results = ds.FindAll(); foreach (SearchResult result in Results) { if (result.Properties[&amp;#34;description&amp;#34;].Count &amp;gt; 0) { // 透過AD裡的屬性「description」，取得工號  string resultNo = result.Properties[&amp;#34;description&amp;#34;][0].ToString(); Response.Write(resultNo); Response.Write(&amp;#34;&amp;lt;br&amp;gt;&amp;#34;); } } ds.Dispose(); // 釋放資源  de.Dispose();  修改指定帳號的屬性值 string QueryString = &amp;quot;LDAP://&amp;quot;+ userLDAP; DirectoryEntry de = new DirectoryEntry(QueryString, adminAccount,adminPassword); de.</description>
    </item>
    
    <item>
      <title>[SQL] 常用的日期函數</title>
      <link>https://blog.poyi.tw/blog/2013/09/12/sql-date/</link>
      <pubDate>Thu, 12 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/09/12/sql-date/</guid>
      <description>DATEADD (datepart , number , date ) 將日期加上n個datepart
Select dateadd( day , 1 , &amp;#39;2020-10-20&amp;#39;) // 2020-10-21 Select dateadd( year , 5 , &amp;#39;2020-10-20&amp;#39;) // 2025-10-20 DATEDIFF ( datepart , startdate , enddate ) 計算startdate跟enddate距離幾個datepart
Select datediff ( day , &amp;#39;2015-06-17&amp;#39;, &amp;#39;2015-06-20&amp;#39;) // 3 Select datediff ( MONTH , &amp;#39;2015-06-17&amp;#39;, &amp;#39;2016-06-20&amp;#39;) // 12 DATEPART( datepart , date ) 可查詢日期的細部資料：第幾季、第幾週、星期幾..傳回整數
Select DATEPART( weekday , getdate() ) // 4 Select DATEPART( quarter , getdate() ) // 3 DATENAME ( datepart , date ) 可查詢日期的細部資料：第幾季、第幾週、星期幾.</description>
    </item>
    
    <item>
      <title>[ASP.NET] 日期處理</title>
      <link>https://blog.poyi.tw/blog/2013/09/05/aspnet-date/</link>
      <pubDate>Thu, 05 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/09/05/aspnet-date/</guid>
      <description>日期運算其實還蠻常用到的，但好像變化不多 // 利用TimeSpan 日期相減 	TimeSpan ts = DateTime1 - DateTime2; int differenceInDays = ts.Days; // 加上指定月數、天數、時間  DateTime DateTime3 = DateTime1.AddDays(50); DateTime DateTime4 = DateTime1.AddMonths(12); // 顯示特定格式  TextBox1.Text = DateTime4.ToString(&amp;#34;dddd&amp;#34;); // 星期二  TextBox1.Text = DateTime4.ToString(&amp;#34;MMMM&amp;#34;);	// 七月  TextBox1.Text = DateTime4.ToString(&amp;#34;MMMM&amp;#34;,CultureInfo.CreateSpecificCulture(&amp;#34;en-US&amp;#34;)));	// July 	TextBox1.Text = DateTime4.ToString(&amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;);  Reference: http://www.dotblogs.com.tw/hung-chin/archive/2012/10/15/77503.aspx http://gogo1119.pixnet.net/blog/post/28140411-%5Bc%23%5D-datetime-tostring%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%99%95%E7%90%86</description>
    </item>
    
    <item>
      <title>[ASP.NET] 列印</title>
      <link>https://blog.poyi.tw/blog/2013/09/04/aspnet-print/</link>
      <pubDate>Wed, 04 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/09/04/aspnet-print/</guid>
      <description> 列印指定文件 string filePath = &amp;#34;C:\\test.txt&amp;#34;; // 使用預設印表機  LocalPrintServer ps = new LocalPrintServer(); PrintQueue queue = ps.DefaultPrintQueue; // 指定特定印表機  PrintServer ps = new PrintServer(@&amp;#34;\\TY-SRV-PRINT01&amp;#34;); PrintQueue queue = new PrintQueue(ps, &amp;#34;FUJIXEROX&amp;#34;); PrintSystemJobInfo pj = queue.AddJob(filePath); Stream myStream = pj.JobStream; Byte[] myByteBuffer = System.IO.File.ReadAllBytes(filePath); myStream.Write(myByteBuffer, 0, myByteBuffer.Length); myStream.Close(); queue.Commit(); </description>
    </item>
    
    <item>
      <title>[ASP.NET] 呼叫執行檔</title>
      <link>https://blog.poyi.tw/blog/2013/09/04/aspnet-implementation/</link>
      <pubDate>Wed, 04 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/09/04/aspnet-implementation/</guid>
      <description> 執行指定檔案(or .exe) Client端 Process p = new Process(); p.StartInfo.FileName = &amp;#34;@&amp;#34;C:\Users\PoYi\Desktop\test.txt&amp;#34;&amp;#34;; p.Start();  Server端 System.Diagnostics.ProcessStartInfo psi = new System.Diagnostics.ProcessStartInfo(); psi.FileName = @&amp;#34;C:\Users\PoYi\Desktop\test.txt&amp;#34;; psi.Arguments=&amp;#34;&amp;#34;; System.Diagnostics.Process.Start(psi); </description>
    </item>
    
    <item>
      <title>[ASP.NET] 資安基本概念</title>
      <link>https://blog.poyi.tw/blog/2013/09/04/network-attacks/</link>
      <pubDate>Wed, 04 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/09/04/network-attacks/</guid>
      <description>以往都是寫供內部使用的網站，也沒想過有什麼資安的問題… 也就是說資安這一環，幾乎是無知的狀態…
SQL Injection 將字串中夾帶SQL指令，讓SERVER認為是正常指令而執行
ASP.NET 防範方法  避免直接將使用者輸入的資料作為SQL指令；或是利用SQLParameter來處理參數 將設定customErrors:On，至少出錯時不會show出程式碼 設定專屬SQL帳號及必要權限，避免使用sa 其他&amp;hellip;  XSS －通常是指對方將有害程式碼惡意嵌入網頁當中，使得其他人連進此網頁時會受到影響；或是對方竊取更高的權限、Cookie等等…；(常見的為JavaScript)
ASP.NET 防範方法  盡量保持ValidateRequest為啟用 進行Html Encode(前端或後端) 其他&amp;hellip;必須防範所有有機會寫入Html tag的地方  Reference: http://anti-hacker.blogspot.tw/2008/01/xss.html http://zh.wikipedia.org/wiki/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC https://www.google.com.tw/#q=csrf http://blog.darkthread.net/blogs/darkthreadtw/archive/2008/05/07/are-your-website-naked.aspx</description>
    </item>
    
    <item>
      <title>[HTML5] 入門</title>
      <link>https://blog.poyi.tw/blog/2013/08/29/html5/</link>
      <pubDate>Thu, 29 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/08/29/html5/</guid>
      <description>HTML 5 基本樣式 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;HTML 5&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;Hello World!&amp;lt;p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 視訊播放 瀏覽器會依type特性來決定要顯示哪一個影片檔，也可以依照不同尺寸來設定觀看的的解析度。 video標籤可用的屬性:Preload(不自動下載視訊)、Loop(重複播放)、autoplay(開啟後自動播放)、width、height&amp;hellip;
&amp;lt;video controls autoplay&amp;gt; &amp;lt;source src=&amp;#34;Simple Plan.720p.webm&amp;#34; type=&amp;#34;video/webm&amp;#34; media=&amp;#34;screen and (min-width: 500px)&amp;#34;&amp;gt; &amp;lt;source src=&amp;#34;Simple Plan.360p.webm&amp;#34; type=&amp;#34;video/webm&amp;#34;&amp;gt; &amp;lt;source src=&amp;#34;Simple Plan.mp4&amp;#34; type=&amp;#34;video/mp4&amp;#34;&amp;gt; &amp;lt;source src=&amp;#34;Simple Plan.ogg&amp;#34; type=&amp;#34;video/ogg&amp;#34;&amp;gt; Sorry...Your browser is crap... &amp;lt;/video&amp;gt; 目前查到的資料： IE、Safari 只支援mp4 Opera 支援webm ogg FireFox 支援webm ogg (mp4部分支援) Chrome 全都支援
http://www.w3schools.com/html/html5_video.asp</description>
    </item>
    
    <item>
      <title>GIT</title>
      <link>https://blog.poyi.tw/blog/2013/08/29/git-basic/</link>
      <pubDate>Thu, 29 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/08/29/git-basic/</guid>
      <description>apt-get install git-core git config --global user.name &amp;#34;name&amp;#34; git config --global user.email &amp;#34;email&amp;#34; git config --list # 查看設定# Git的基本功(status, add, commit, log, .gitignore) git status git add git add . git commit git commit -m &amp;#34;Add test.rb to test git function&amp;#34; git log (-p) git log --statgitk --all (&amp;amp;) 內建gui git branch 這個指令可以列出所有的 branch 並告訴你目前正在哪個 branch： git branch (new_branch_name) git checkout &amp;#34;Loser&amp;#34; 切換branch http://howar31.blogspot.tw/2013/06/git.html http://tech.marsw.tw/blog/2013/08/16/git-notes-github 因此我們稍微做一下流程的整理： 修改檔案 =&amp;gt; 加入 stage (git add) =&amp;gt; 提交( git commit )=&amp;gt; 繼續修改其他檔案</description>
    </item>
    
    <item>
      <title>[ASP.NET] 檔案下載寫法</title>
      <link>https://blog.poyi.tw/blog/2013/08/28/aspnet-file-download/</link>
      <pubDate>Wed, 28 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/08/28/aspnet-file-download/</guid>
      <description>Response.WriteFile 檔案下載方式一 using System.IO; string filePath = &amp;#34;C:/porn.jpg&amp;#34;; FileInfo file = new FileInfo(filePath); Response.Clear() Response.Buffer = false; Response.ContentType = &amp;#34;application/octet-stream&amp;#34;; // 指定檔案類型 	Response.AddHeader(&amp;#34;Content-Disposition&amp;#34;,&amp;#34;attachment;filename=&amp;#34;+&amp;#34;porn.jpg&amp;#34;); // 設定檔名 	// System.Web.HttpUtility.UrlEncode(newFileName, System.Text.Encoding.UTF8) 解決中文檔名亂碼 	Response.AppendHeader(&amp;#34;Content-Length&amp;#34;, file.Length.ToString()); // 表頭加入檔案大小 	Response.WriteFile(file.FullName); Response.Flush(); Response.End();  System.Net.WebClient.DownloadData 檔案下載方式二 using System.Net; WebClient wc = new WebClient(); byte[] byteFile = null; string path = &amp;#34;C:/porn.jpg&amp;#34;; // 設定路徑 	byteFile = wc.DownloadData(path); string fileName = System.IO.Path.GetFileName(path); // 取得檔案名稱 	Response.</description>
    </item>
    
    <item>
      <title>[ASP.NET] Linq基本用法</title>
      <link>https://blog.poyi.tw/blog/2013/08/23/linq-introduction/</link>
      <pubDate>Fri, 23 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/08/23/linq-introduction/</guid>
      <description>公司前輩跟我提過可以用用看Linq比較潮(?) 寫.NET的時候就不需要寫的這麼..無腦
 sqlStr += &amp;quot;Select ...&amp;quot;; sqlStr += &amp;quot;from ....&amp;quot;; sqlStr += &amp;quot;join ...&amp;quot;; sqlStr += &amp;quot;where ....&amp;quot; string sql = @&amp;quot;SELECT ... FROM table1 WHERE field3 = @Param1&amp;quot;;  基本Linq類似這樣
 var Query = from q in myDB.Employee where q.Name == &amp;quot;Bob&amp;quot; select q; Group By int[] values = {1,2,3,4,5,6}; var Query = from p in values group p by p % 2 ==0; // values =&amp;gt; 1 3 5 0 2 4  </description>
    </item>
    
    <item>
      <title>[ASP.NET] 頁面傳值</title>
      <link>https://blog.poyi.tw/blog/2013/08/22/aspnet-viewstatus-session/</link>
      <pubDate>Thu, 22 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/08/22/aspnet-viewstatus-session/</guid>
      <description>Client-Base ViewState：相當於把值存放於hidden field當中 只存在單一Web form 預設開啟、未完善加密 不會佔用系統資源 較不適合大量或機密資料
Server-Base Session：類似跨網頁的全域變數 多個頁面傳值 預設存放記憶體 可設定Time out</description>
    </item>
    
    <item>
      <title>[SQL] 常用語法</title>
      <link>https://blog.poyi.tw/blog/2013/07/28/sql-syntax/</link>
      <pubDate>Sun, 28 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/07/28/sql-syntax/</guid>
      <description> 不一定是常用…而是記不太起來，每次都要查… DBCC CHECKIDENT ( *tablename*, RESEED, new_reseed_value ) 強制重設table的識別值 DBCC CHECKIDENT(tablename, RESEED, 0)	// 歸零識別值 SQL驗證 Data Source=;Initial catalog=;User ID=;Password=
Windows驗證 Data Source=;Initial Catalog=;integrated security=sspi
union:上下重直合併
萬用字元
% _:代表一個字元 〔〕:指定字元範圍；[0-9]、[A-D]、[ABCD] 〔^〕:排除字元範圍:[^ABC]  </description>
    </item>
    
    <item>
      <title>[C#] String常用語法</title>
      <link>https://blog.poyi.tw/blog/2013/07/22/string-syntax/</link>
      <pubDate>Mon, 22 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/07/22/string-syntax/</guid>
      <description>StringBuilder: 用append串接；大量動態字串時效率較高 String: 用+串接；固定字串時，效率較高
一般情況都用String String.IndexOf 找字串中第一次出現的index
if(employeeName.IndexOf(&amp;quot;Admin&amp;quot;) == -1)	// 可判斷Name中是否有符合Admin的字串  String.LastIndexOf 找字串中最後一次出現的index
Substring(int startIndex, int length) 擷取字串
string str = &amp;quot;台灣駐史瓦濟蘭大使館&amp;quot;; str.Substring(3, 6); // output: 史瓦濟蘭大使  Split 分隔字串
string wholeString = &amp;quot;Bob.Lu&amp;quot;; string[] spiltString = wholeString.Split(new string[] { &amp;quot;.&amp;quot; }, StringSplitOptions.RemoveEmptyEntries); aryUserInfo[0].ToString(); // output: Bob  Regex.IsMatch(string input, string pattern) 是否包含xxx
Regex.IsMatch(strPwd, &amp;quot;[0-9]&amp;quot;) // = Regex.IsMatch(strPwd, @&amp;quot;\d&amp;quot;) Regex.IsMatch(strPwd, @&amp;quot;[\W]&amp;quot;)  pattern表示法 : \d : [0-9] 數字 \D : 數字以外的字元 \w : [a-zA-Z0-9_] \W : \w以外的字元</description>
    </item>
    
    <item>
      <title>[English] Common E-mail Errors</title>
      <link>https://blog.poyi.tw/blog/2013/07/22/common-e-mail-errors/</link>
      <pubDate>Mon, 22 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/07/22/common-e-mail-errors/</guid>
      <description>台灣人常出現的Email issue X : We need to cost down on this project. (&amp;ldquo;cost down&amp;rdquo; is not a word)
X : Please feel free to contact with me. (&amp;ldquo;with&amp;rdquo; is unnecessary)
X : If you have any question, please let me know. (&amp;ldquo;questions&amp;rdquo;)
&amp;ndash;
Subject Lines:
Subject Lines aren&amp;rsquo;t sentences, so don&amp;rsquo;t use period(.)
Greeting:
X: Dear Miss Lu, (Ms. is correct, because we don&amp;rsquo;t know she is married or not)</description>
    </item>
    
    <item>
      <title>[C#] DataTable 的操作備忘</title>
      <link>https://blog.poyi.tw/blog/2013/03/03/c-datatable-operation-memos/</link>
      <pubDate>Sun, 03 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/03/03/c-datatable-operation-memos/</guid>
      <description>稍微記一下，相關變化都蠻簡單的
DataTable dt = new DataTable(); // 定義欄位 dt.Columns.Add(&amp;#34;name&amp;#34;); dt.Columns.Add(&amp;#34;cardNumber&amp;#34;); // 也可定義欄位型態 // dt.Columns.Add(&amp;#34;ID&amp;#34;, typeof(Int32));  dt.Rows.Add(&amp;#34;Bob&amp;#34;, &amp;#34;12345&amp;#34;); dt.Rows.Add(&amp;#34;Ada&amp;#34;, &amp;#34;10000&amp;#34;); dt.Rows.Add(&amp;#34;Kilin&amp;#34;,&amp;#34;20000&amp;#34;); // 也可用DataRow來存放資料  // 格式相同直接放入GridView GridView.DataSource = dt; GridView.DataBind(); </description>
    </item>
    
    <item>
      <title>[C#] 自動寄信</title>
      <link>https://blog.poyi.tw/blog/2013/03/03/aspnet-auto-return/</link>
      <pubDate>Sun, 03 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/03/03/aspnet-auto-return/</guid>
      <description>一樣是紀綠一下&amp;hellip;
MailMessage mailMessage = new MailMessage(); mailMessage.IsBodyHtml = true; mailMessage.To.Add(emailAddress); mailMessage.CC.Add(cCMailAddress); MailAddress fromWho = new MailAddress(senderMailAddress); mailMessage.From = fromWho; mailMessage.Subject = title; mailMessage.Body = &amp;#34;這邊可放html&amp;#34; SmtpClient mailSmtp = new SmtpClient(mailServer,mailServerPort); mailSmtp.Send(mailMessage); </description>
    </item>
    
    <item>
      <title>[Linux] 超入門的基本指令</title>
      <link>https://blog.poyi.tw/blog/2013/02/15/linux-getting-started-with-hyper-basic-instructions/</link>
      <pubDate>Fri, 15 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/02/15/linux-getting-started-with-hyper-basic-instructions/</guid>
      <description>之前在非洲服役時，曾想過用Linux取代Windows (當地經濟因素等等的&amp;hellip;) 也嘗試用Wine來執行一些常用的Windows軟體，大致上也都沒問題，只可惜當地政府的課程始終沒有開始&amp;hellip;
對Linux不是完全陌生，但指令倒是全忘了&amp;hellip; 為了往後開發上不會綁手綁腳，還是必須把基本功打好，從零開始
# 系統資訊 $ echo hello word $ date $ arch // x86_64 $ uname –a // list system $ who $ w // show online user $ top // show system status $ cal 2015 // calendar $ cal 9 1752 // * $ bc –l // calculator $ echo 77/50 | bc –l $ history // list command history# 網路 $ ifconfig $ nslookup $ ping $ traceroute $ wget // download $ ssh 帳號@主機	// 用SSH連線# chmod 調整檔案權限 chmod [權限角色] [權限動作] [存取權限] 檔案/目錄 chmod [ugoa] [+-=] [rwxX] test.</description>
    </item>
    
    <item>
      <title>[ASP.NET] Reset Password in Active Directory</title>
      <link>https://blog.poyi.tw/blog/2013/02/14/aspnet-reset-password-in-active-directory/</link>
      <pubDate>Thu, 14 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/02/14/aspnet-reset-password-in-active-directory/</guid>
      <description>重設密碼建議還是用LDAP去抓USER，以免抓錯人之類的
// Reset Password in Active Directory DirectoryEntry userDirEntry = new DirectoryEntry(&amp;#34;LDAP://&amp;#34; + ldapStr, adminAccount, adminPassword); userDirEntry.Invoke(&amp;#34;SetPassword&amp;#34;, CreateRandomPassword(8));	// 重設新密碼 userDirEntry.CommitChanges(); userDirEntry.Properties[&amp;#34;pwdLastSet&amp;#34;].Value = 0; // 下次登入會強制要求改密碼 userDirEntry.CommitChanges(); userDirEntry.Close(); // Generate Random Password (Winform)  public static string CreateRandomPassword(int passwordLength) { string allowedChars = &amp;#34;abcdefghijkmnprstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789~!@#$%^&amp;amp;*()_+?&amp;#34;; char[] chars = new char[passwordLength]; for (int i = 0; i &amp;lt; passwordLength; i++) { chars[i] = allowedChars[rd.Next(0, allowedChars.Length)]; // random.next(min,max) =&amp;gt;int  } string strPwd = new string(chars); while (!</description>
    </item>
    
    <item>
      <title>[Mac] 設定開啟檔案的預設軟體</title>
      <link>https://blog.poyi.tw/blog/2013/02/08/mac-set-to-open-files-by-default-software/</link>
      <pubDate>Fri, 08 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/02/08/mac-set-to-open-files-by-default-software/</guid>
      <description> 近期在mac的環境上有點卡關，像是環境的PATH曾被我改壞&amp;hellip; 還好朋友有幫我救回來= =&amp;hellip;
在windows上習慣會調整一些檔案的預設軟體來開啟，像是影片檔的格式一堆就很需要額外設定。
首先，在檔案上右鍵找到「簡介」 接著找到「打開檔案的應用程式」，調整為你要的預設軟體 然後按下「全部更改」 就可以把該副檔名的檔案都設定成此軟體開啟了yaya </description>
    </item>
    
    <item>
      <title>[CSS] 定位</title>
      <link>https://blog.poyi.tw/blog/2013/01/02/css-position/</link>
      <pubDate>Wed, 02 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/01/02/css-position/</guid>
      <description>以前都是直接用現成的，或是抓別人的css來用 一堆語法都知道是幹麻的，但自己寫的時候就完全不行 尤其是layout的配置..明明感覺很簡單的卻要一直亂試喬半天&amp;hellip;
趁著最近面試的機會來記一下CSS&amp;hellip;. 不然平常都很懶得學
Position # position, 依top, left, right, bottom調整位置 position: absloute /* 絕對位置 */ position: relative /* 相對位置，以該元件所屬的左上角做基準點，移動位置仍會佔有原先位置的空間 */ position: fixed /* 固定位置，定在視窗上 */ /* 當相對位置包住絕對位置時，絕對位置所基準就會為相對位置 */ z-index z-index 元件重疊時，值愈大，顯示愈上面
overflow # 控制轉軸 overflow: visible /* 內容完整呈現 */ overflow: hidden /* 只顯示放得下的內容 */ overflow: scroll /* 強制加右方下方捲軸 */ overflow: auto /* 內容放不下時，加右方捲軸 */ Reference: http://my-web-design.blogspot.tw/2007/10/css-divposition.html http://www.1keydata.com/css-tutorial/tw/position.php</description>
    </item>
    
    <item>
      <title>ABOUT</title>
      <link>https://blog.poyi.tw/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/about/</guid>
      <description>Bob Lu Ruby on Rails
Bitcoin, Blockchain, Cryptocurrency
maydaybob2000 at gmail.com
Bitcoin Address: 1BobLu5mh5H6sbhGYcwfKt2griDkV6Vhmw  </description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://blog.poyi.tw/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/about/</guid>
      <description>Bob Lu Ruby on Rails
Bitcoin, Blockchain, Cryptocurrency
maydaybob2000 at gmail.com
Bitcoin Address: 1BobLu5mh5H6sbhGYcwfKt2griDkV6Vhmw  </description>
    </item>
    
    <item>
      <title>Memo</title>
      <link>https://blog.poyi.tw/memo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/memo/</guid>
      <description>調整系統時區 sudo dpkg-reconfigure tzdata 查詢容量 // 目錄下各檔案資料夾的所佔空間 $ du -smh * // 列出佔用空間前 5 名 $ du -s /var/* | sort -rn | head -5 // 依磁區 $ df -h // 顯示目錄下檔案 ls -lh 查詢系統資訊 // 記憶體用量 $ free -h // 硬體規格 $ cat /proc/cpuinfo $ cat /proc/cpuinfo | grep processor | wc -l $ cat /proc/meminfo $ sudo lshw $ ls /sys/class/net // 登入的user $ w $ whoami $ date $ cal $ uptime // os版本資訊 $ uname -a $ lsb_release -a $ more /proc/partitions $ ls /dev/[sh]d* $ df -h $ sudo fdisk -l 網路設定 # 有線 auto eth0 iface eth0 inet dhcp # iface wlan0 inet static # address 192.</description>
    </item>
    
  </channel>
</rss>