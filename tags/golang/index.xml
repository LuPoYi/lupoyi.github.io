<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Bob 學習筆記</title>
    <link>https://blog.poyi.tw/tags/golang/</link>
    <description>Recent content in golang on Bob 學習筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <lastBuildDate>Sun, 15 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.poyi.tw/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[gRPC] Golang &amp; Ruby</title>
      <link>https://blog.poyi.tw/blog/2019/09/15/grpc-golang-ruby/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2019/09/15/grpc-golang-ruby/</guid>
      <description>gRPC gRPC是由Google推出的Remote Procedure Calls(RPC)，開發上支援各種主流語言，底層採用HTTP/2協定，再利用Protocol Buffers (protobuf)序列化資料來更有效地進行傳輸。
有別於傳統的REST，gRPC之間溝通不需要傳遞多餘的HTTP header及HTTP method(GET, POST, PUT, DELETE)，而是由事先就必須定義好protobuf的資料結構，而server端與client端直接去實作這些interface即可，並不需要額外去寫路由。
Install gRPC go get google.golang.org/grpc go get -u github.com/golang/protobuf/{proto,protoc-gen-go} 定義protobuf - demo.proto syntax = &amp;#34;proto3&amp;#34;;package demo;service DemoService { rpc SayHello (HelloRequest) returns (HelloResponse); rpc Sum (SumRequest) returns (SumResponse);}message HelloRequest { string name = 1;}message HelloResponse { string message = 1;}message SumRequest { int64 numberOne = 1; int64 numberOne = 2;}message SumResponse { int64 sum = 1;} Server - Golang 實作 func (s *server) SayHello(ctx context.</description>
    </item>
    
  </channel>
</rss>