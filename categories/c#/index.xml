<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on Bob 學習筆記</title>
    <link>https://blog.poyi.tw/categories/c#/</link>
    <description>Recent content in C# on Bob 學習筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <lastBuildDate>Fri, 04 Oct 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.poyi.tw/categories/c#/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[C#]  Delegate 委派</title>
      <link>https://blog.poyi.tw/blog/2013/10/04/c-delegate-delegate/</link>
      <pubDate>Fri, 04 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/10/04/c-delegate-delegate/</guid>
      <description>Delegate 是 C# 的特殊型別，用來定義方法（method/function）的 signature，delegate 的實體（instance）可以存放一或多個符合該 signature 的方法。這樣講也許還是鴨子聽雷，不如我們實際來感受一下吧！ delegate實例獨立於它所封裝的方法的類 這邊在個multicst delegate的例子 using System;
class MulticastTester { delegate void Greeting();
public static void Main() { Greeting myGreeting = new Greeting(SayThankYou); Console.WriteLine(&amp;quot;My single greeting:&amp;quot;); myGreeting(); Greeting yourGreeting = new Greeting(SayGoodMorning); Console.WriteLine(&amp;quot;\nYour single greeting:&amp;quot;); yourGreeting(); Greeting ourGreeting = myGreeting + yourGreeting; Console.WriteLine(&amp;quot;\nOur multicast greeting:&amp;quot;); ourGreeting(); ourGreeting += new Greeting(SayGoodnight); Console.WriteLine(&amp;quot;\nMulticast greeting which includes Goodnight:&amp;quot;); ourGreeting(); ourGreeting = ourGreeting - yourGreeting; Console.WriteLine(&amp;quot;\nMulticast greeting without your greeting:&amp;quot;); ourGreeting(); ourGreeting -= myGreeting; Console.</description>
    </item>
    
    <item>
      <title>[C#] IEnumerable vs IQueryable</title>
      <link>https://blog.poyi.tw/blog/2013/09/30/c-ienumerable/</link>
      <pubDate>Mon, 30 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/09/30/c-ienumerable/</guid>
      <description>在linq的使用上，IEnumerable是不可或缺的泛型介面 像是foreach迴圈就是利用IEnumerable的特性(MoveNext)來實現逐一檢查。
而IQueryable又繼承了IEnumerable&amp;hellip;
兩者的差別從概念上來說： IEnumerable:先將查詢的值取出，再一層一層做篩選。 IQueryable:把全部Linq翻成T-SQL，直到真正要使用時才去執行。
// list1 IEnumerable&amp;lt;Employee&amp;gt; list1 = myDB.Employees.Where(p =&amp;gt; p.Name.StartsWith(&amp;#34;S&amp;#34;)); list1 = list1.Take&amp;lt;Employee&amp;gt;(10); // list2 IQueryable&amp;lt;Employee&amp;gt; list2 = myDB.Employees.Where(p =&amp;gt; p.Name.StartsWith(&amp;#34;S&amp;#34;)); list2 = list2.Take&amp;lt;Employee&amp;gt;(10); // list1 SELECT [t0].[EmpID], [t0].[EmpName], [t0].[Salary] FROM [Employee] AS [t0] WHERE [t0].[EmpName] LIKE @p0 // list2 SELECT TOP 10 [t0].[EmpID], [t0].[EmpName], [t0].[Salary] FROM [Employee] AS [t0] WHERE [t0].[EmpName] LIKE @p0 可以看到 IQueryable 在執行時直接向SQL要求TOP 10；而 IEnumerable 則是把全部撈出來再做一些篩選。
Reference: http://msdn.microsoft.com/zh-tw/library/ttw7t8t6.ASPX http://www.cnblogs.com/seebook/archive/2009/02/21/1395310.html http://www.dotnet-tricks.com/Tutorial/linq/I8SY160612-IEnumerable-VS-IQueryable.html</description>
    </item>
    
    <item>
      <title>[ASP.NET] 檔案下載寫法</title>
      <link>https://blog.poyi.tw/blog/2013/08/28/aspnet-file-download/</link>
      <pubDate>Wed, 28 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/08/28/aspnet-file-download/</guid>
      <description>Response.WriteFile 檔案下載方式一 using System.IO; string filePath = &amp;quot;C:/porn.jpg&amp;quot;; FileInfo file = new FileInfo(filePath); Response.Clear() Response.Buffer = false; Response.ContentType = &amp;quot;application/octet-stream&amp;quot;; // 指定檔案類型 Response.AddHeader(&amp;quot;Content-Disposition&amp;quot;,&amp;quot;attachment;filename=&amp;quot;+&amp;quot;porn.jpg&amp;quot;); // 設定檔名 // System.Web.HttpUtility.UrlEncode(newFileName, System.Text.Encoding.UTF8) 解決中文檔名亂碼 Response.AppendHeader(&amp;quot;Content-Length&amp;quot;, file.Length.ToString()); // 表頭加入檔案大小 Response.WriteFile(file.FullName); Response.Flush(); Response.End();  System.Net.WebClient.DownloadData 檔案下載方式二 using System.Net; WebClient wc = new WebClient(); byte[] byteFile = null; string path = &amp;quot;C:/porn.jpg&amp;quot;; // 設定路徑 byteFile = wc.DownloadData(path); string fileName = System.IO.Path.GetFileName(path); // 取得檔案名稱 Response.AppendHeader(&amp;quot;content-disposition&amp;quot;, &amp;quot;attachment;filename=&amp;quot; + &amp;quot;porn.jpg&amp;quot;); //設定檔名 // HttpContext.</description>
    </item>
    
    <item>
      <title>[C#] String常用語法</title>
      <link>https://blog.poyi.tw/blog/2013/07/22/string-syntax/</link>
      <pubDate>Mon, 22 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/07/22/string-syntax/</guid>
      <description>StringBuilder: 用append串接；大量動態字串時效率較高 String: 用+串接；固定字串時，效率較高
一般情況都用String String.IndexOf 找字串中第一次出現的index
if(employeeName.IndexOf(&amp;quot;Admin&amp;quot;) == -1)	// 可判斷Name中是否有符合Admin的字串  String.LastIndexOf 找字串中最後一次出現的index
Substring(int startIndex, int length) 擷取字串
string str = &amp;quot;台灣駐史瓦濟蘭大使館&amp;quot;; str.Substring(3, 6); // output: 史瓦濟蘭大使  Split 分隔字串
string wholeString = &amp;quot;Bob.Lu&amp;quot;; string[] spiltString = wholeString.Split(new string[] { &amp;quot;.&amp;quot; }, StringSplitOptions.RemoveEmptyEntries); aryUserInfo[0].ToString(); // output: Bob  Regex.IsMatch(string input, string pattern) 是否包含xxx
Regex.IsMatch(strPwd, &amp;quot;[0-9]&amp;quot;) // = Regex.IsMatch(strPwd, @&amp;quot;\d&amp;quot;) Regex.IsMatch(strPwd, @&amp;quot;[\W]&amp;quot;)  pattern表示法 : \d : [0-9] 數字 \D : 數字以外的字元 \w : [a-zA-Z0-9_] \W : \w以外的字元</description>
    </item>
    
    <item>
      <title>[C#] DataTable 的操作備忘</title>
      <link>https://blog.poyi.tw/blog/2013/03/03/c-datatable-operation-memos/</link>
      <pubDate>Sun, 03 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/03/03/c-datatable-operation-memos/</guid>
      <description>稍微記一下，相關變化都蠻簡單的
DataTable dt = new DataTable();
// 定義欄位 dt.Columns.Add(&amp;ldquo;name&amp;rdquo;); dt.Columns.Add(&amp;ldquo;cardNumber&amp;rdquo;); // 也可定義欄位型態 // dt.Columns.Add(&amp;ldquo;ID&amp;rdquo;, typeof(Int32));
dt.Rows.Add(&amp;ldquo;Bob&amp;rdquo;, &amp;ldquo;12345&amp;rdquo;); dt.Rows.Add(&amp;ldquo;Ada&amp;rdquo;, &amp;ldquo;10000&amp;rdquo;); dt.Rows.Add(&amp;ldquo;Kilin&amp;rdquo;,&amp;ldquo;20000&amp;rdquo;); // 也可用DataRow來存放資料
// 格式相同直接放入GridView GridView.DataSource = dt; GridView.DataBind();</description>
    </item>
    
    <item>
      <title>[C#] 自動寄信</title>
      <link>https://blog.poyi.tw/blog/2013/03/03/aspnet-auto-return/</link>
      <pubDate>Sun, 03 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/03/03/aspnet-auto-return/</guid>
      <description>一樣是紀綠一下&amp;hellip;
MailMessage mailMessage = new MailMessage(); mailMessage.IsBodyHtml = true; mailMessage.To.Add(emailAddress); mailMessage.CC.Add(cCMailAddress); MailAddress fromWho = new MailAddress(senderMailAddress); mailMessage.From = fromWho; mailMessage.Subject = title; mailMessage.Body = &amp;quot;這邊可放html&amp;quot; SmtpClient mailSmtp = new SmtpClient(mailServer,mailServerPort); mailSmtp.Send(mailMessage);  </description>
    </item>
    
    <item>
      <title>[ASP.NET] Reset Password in Active Directory</title>
      <link>https://blog.poyi.tw/blog/2013/02/14/aspnet-reset-password-in-active-directory/</link>
      <pubDate>Thu, 14 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/02/14/aspnet-reset-password-in-active-directory/</guid>
      <description>重設密碼建議還是用LDAP去抓USER，以免抓錯人之類的
DirectoryEntry userDirEntry = new DirectoryEntry(&amp;#34;LDAP://&amp;#34; + ldapStr, adminAccount, adminPassword); userDirEntry.Invoke(&amp;#34;SetPassword&amp;#34;, CreateRandomPassword(8));	// 重設新密碼 userDirEntry.CommitChanges(); userDirEntry.Properties[&amp;#34;pwdLastSet&amp;#34;].Value = 0; // 下次登入會強制要求改密碼 userDirEntry.CommitChanges(); userDirEntry.Close();public static string CreateRandomPassword(int passwordLength) { string allowedChars = &amp;#34;abcdefghijkmnprstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789~!@#$%^&amp;amp;*()_+?&amp;#34;; char[] chars = new char[passwordLength]; for (int i = 0; i &amp;lt; passwordLength; i++) { chars[i] = allowedChars[rd.Next(0, allowedChars.Length)]; // random.next(min,max) =&amp;gt;int } string strPwd = new string(chars); while (!((Regex.IsMatch(strPwd, &amp;#34;[0-9]&amp;#34;)) &amp;amp;&amp;amp; (Regex.IsMatch(strPwd, &amp;#34;[a-z]&amp;#34;)) &amp;amp;&amp;amp; (Regex.IsMatch(strPwd, &amp;#34;[A-Z]&amp;#34;)) &amp;amp;&amp;amp; (Regex.IsMatch(strPwd, @&amp;#34;[\W]&amp;#34;)))) // \w [a-zA-Z0-9_] , \W !</description>
    </item>
    
  </channel>
</rss>