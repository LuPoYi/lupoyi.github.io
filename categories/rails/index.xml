<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rails on Bob 學習筆記</title>
    <link>https://blog.poyi.tw/categories/rails/</link>
    <description>Recent content in rails on Bob 學習筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <lastBuildDate>Sat, 11 Jul 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.poyi.tw/categories/rails/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Rails] 各種update method</title>
      <link>https://blog.poyi.tw/blog/2015/07/11/rails-various-update-methods/</link>
      <pubDate>Sat, 11 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2015/07/11/rails-various-update-methods/</guid>
      <description>##正規Rails的更新 - update
會觸發validation、callback、也會更新updated_at
&amp;gt; Comment.last.update(message: &amp;#39;bbb&amp;#39;) (0.1ms) begin transaction SQL (0.4ms) UPDATE &amp;#34;comments&amp;#34; SET &amp;#34;message&amp;#34; = ?, &amp;#34;updated_at&amp;#34; = ? WHERE &amp;#34;comments&amp;#34;.&amp;#34;id&amp;#34; = ? [[&amp;#34;message&amp;#34;, &amp;#34;bbb&amp;#34;], [&amp;#34;updated_at&amp;#34;, &amp;#34;2015-07-11 09:42:02.303661&amp;#34;], [&amp;#34;id&amp;#34;, 200]] (9.1ms) commit transaction =&amp;gt; true ##相當於直接下SQL的更新 - update_columns, update_all
而 update_columns 及 update_all 是直接幫你下SQL更新欄位，會忽視Rails的validation，也沒有callback，updated_at也不會更新。所以最好是很確定要更新的值沒問題再使用這類語法。
&amp;gt; Comment.where(:id =&amp;gt; 200).first.update_columns(message: &amp;#39;bbbbb&amp;#39;, post_id: 3) SQL (9.2ms) UPDATE &amp;#34;comments&amp;#34; SET &amp;#34;message&amp;#34; = &amp;#39;bbbbb&amp;#39;, &amp;#34;post_id&amp;#34; = 3 WHERE &amp;#34;comments&amp;#34;.&amp;#34;id&amp;#34; = ? [[&amp;#34;id&amp;#34;, 200]] # update_column 跟 update_columns 相同，只是傳入值key跟value必須是string，並用逗點分隔 &amp;gt; Comment.</description>
    </item>
    
    <item>
      <title>[Rails] AJAX render errors in json</title>
      <link>https://blog.poyi.tw/blog/2015/06/12/rails-ajax-render-error-in-json/</link>
      <pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2015/06/12/rails-ajax-render-error-in-json/</guid>
      <description>$.ajax({ url: URL, async:false, data:{ amount: 100, }, dataType:&amp;#39;json&amp;#39;, method:&amp;#39;post&amp;#39;, success:function(data){ // do success things }, error:function(xhr){ var errors = $.parseJSON(xhr.responseText).errors alert(errors); } );def create if amount &amp;lt; 100 render :json =&amp;gt; { :errors =&amp;gt; &amp;#34;金額不足&amp;#34; }, :status =&amp;gt; 422 return end end 當錯誤回傳時，使用422(Unprocessable Entity)來做error handling
Reference:
http://travisjeffery.com/b/2012/04/rendering-errors-in-json-with-rails/ http://stackoverflow.com/questions/16133923/400-vs-422-response-to-post-of-data</description>
    </item>
    
    <item>
      <title>[Rails] Bootstrap for Rails</title>
      <link>https://blog.poyi.tw/blog/2013/12/07/rails-bootstrap-for-rails/</link>
      <pubDate>Sat, 07 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/12/07/rails-bootstrap-for-rails/</guid>
      <description>gem &amp;#39;bootstrap-sass&amp;#39;@import &amp;#39;bootstrap&amp;#39;//= require bootstrap 這樣就可以用了yaya</description>
    </item>
    
    <item>
      <title>[Rails] 打包Gem套件</title>
      <link>https://blog.poyi.tw/blog/2013/12/02/rails-gem/</link>
      <pubDate>Mon, 02 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/12/02/rails-gem/</guid>
      <description>當我們要安裝別人寫好的Library、API時，通常會
gem &amp;#39;google-translate&amp;#39; 或是
$ gem install google-translate 打包gem 而當我們要打包自己的gem，自用或供他人使用，該怎麼做？
$ bundle gem bob_test_plugingem build bob_test_plugin.gemspec 此時會生成 bob_test_plugin-0.0.1.gem
$ sudo gem install bob_test_plugin-0.0.1.gemirb&amp;gt;require &amp;#39;bob_test_plugin&amp;#39; =&amp;gt; true irb&amp;gt;BobTestPlugin.name =&amp;gt; &amp;#34;BobTestPlugin&amp;#34; 發佈在 RubyGems.org 申請RubyGems帳號
$ gem push bob_test_plugin-0.0.1.gem Reference: http://blog.xdite.net/posts/2012/01/04/how-to-pack-a-gem http://jex.logdown.com/posts/164687-ruby-build-his-own-gem-packages</description>
    </item>
    
    <item>
      <title>[Rails] ActiveRecord</title>
      <link>https://blog.poyi.tw/blog/2013/11/20/rails-activerecord/</link>
      <pubDate>Wed, 20 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/11/20/rails-activerecord/</guid>
      <description>class Boss &amp;lt; ActiveRecord::Base has_one :employee has_many :employees end class Employee &amp;lt; ActiveRecord::Base belongs_to :boss endclass Employee &amp;lt; ActiveRecord::Base belongs_to :manager, :class_name =&amp;gt; &amp;#34;User&amp;#34;, :foreign_key =&amp;gt; &amp;#34;manager_id&amp;#34; ,:order =&amp;gt; &amp;#34;id desc&amp;#34; end # class_name =&amp;gt; &amp;#34;User&amp;#34; 變更關聯class name # :foreign_key =&amp;gt; &amp;#34;manager_id&amp;#34;變更關聯foreign key,預設為class_id # :order =&amp;gt; &amp;#34;id desc&amp;#34; 排序class Group &amp;lt; ActiveRecord::Base validates :name, presence: true # 此欄位必填 validates :name, :length =&amp;gt; { :minimum =&amp;gt; 2 } validates :bio, :length =&amp;gt; { :maximum =&amp;gt; 500 } validates :password, :length =&amp;gt; { :in =&amp;gt; 6.</description>
    </item>
    
    <item>
      <title>[Rails] RESTful</title>
      <link>https://blog.poyi.tw/blog/2013/11/14/rails-rest/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/11/14/rails-rest/</guid>
      <description> Action helpers Verb Path   index groups_path GET /groups   show group_path(@group) GET /groups/1   new new_group_path GET /groups/new   create groups_path POST /groups   edit edit_group_path(@group) GET /groups/1/edit   update group_path(@group) PUT /groups/1   destroy group_path(@group) DELETE /groups/1   </description>
    </item>
    
    <item>
      <title>[Rails] Connect SQL Server</title>
      <link>https://blog.poyi.tw/blog/2013/10/30/rails-sql-server/</link>
      <pubDate>Wed, 30 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/10/30/rails-sql-server/</guid>
      <description>看到官方提供的adpter..真的不知道怎麼下手.. 魯蛇無誤
Ubuntu Connect to SQL Server 想在Unix、Linux環境上，存取SQL Server似乎大多都使用FreeTDS
$ sudo apt-get install freetds-dev freetds-bin tdsodbc$ tsql -C $ tsql -H (SQL Server IP) -p 1433 -U (account) －P (password) –D (datebase name)$ select * from Team $ go 這邊代表已能在Ubuntu Connect SQL Server 但Rails還需要其他套件
Rails Connect to SQL Server (Error) $ sudo gem install tiny_tds $ sudo gem install activerecord-sqlserver-adapter 修改DateBase.yml OK..在這邊理論上是可以直接在Rails調用.. 但執行時卻會出錯，查了一下好像還無解 (Rails 4似乎還不太支援之類的..) 錯誤訊息可參考 &amp;gt; https://github.com/rails-sqlserver/activerecord-sqlserver-adapter/issues/279 暫時找不到解法，除非把Rails降到3.x版</description>
    </item>
    
    <item>
      <title>[Rails] CRUD 備忘</title>
      <link>https://blog.poyi.tw/blog/2013/10/30/rails-crud/</link>
      <pubDate>Wed, 30 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/10/30/rails-crud/</guid>
      <description>&amp;lt;%= link_to &amp;#39;list&amp;#39;, teams_path %&amp;gt; # GET def index @teams = Team.all end&amp;lt;%= link_to &amp;#39;show&amp;#39;, team_path(team) %&amp;gt; # GET def show @team = Team.find(params[:id]) end&amp;lt;%= link_to &amp;#39;new Team&amp;#39;, new_team_path %&amp;gt; def new @team = Team.new end&amp;lt;%= form_for @team, :url =&amp;gt; teams_path do |t| %&amp;gt; #In a form, the default request method is POST &amp;lt;%= t.text_field :name %&amp;gt; &amp;lt;%= t.text_field :year %&amp;gt; &amp;lt;%= t.submit &amp;#34;Create&amp;#34; %&amp;gt; &amp;lt;% end %&amp;gt; def create Team.</description>
    </item>
    
    <item>
      <title>[Rails] 小技巧</title>
      <link>https://blog.poyi.tw/blog/2013/10/16/rails-tips/</link>
      <pubDate>Wed, 16 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/10/16/rails-tips/</guid>
      <description> .erb的註解 &amp;lt;% #註解可寫在井號後面 %&amp;gt; &amp;lt;% if false %&amp;gt; 或寫在這 &amp;lt;% end %&amp;gt;  .rb的註解 # 一般只用單行註解 =begin 多行註解比較少見 =end  檢查自己寫了多少code $ bundle exec rake stats  $ rake routes  </description>
    </item>
    
    <item>
      <title>[Rails] 基本概念（待補）</title>
      <link>https://blog.poyi.tw/blog/2013/10/07/ruby-basic/</link>
      <pubDate>Mon, 07 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/blog/2013/10/07/ruby-basic/</guid>
      <description>development:# 開發用adapter:sqlite3database:db/development.sqlite3pool:5timeout:5000test:# 測試用adapter:sqlite3database:db/development.sqlite3pool:5timeout:5000production:# 上線用adapter:sqlite3database:db/development.sqlite3pool:5timeout:5000get &amp;#34;welcome&amp;#34; =&amp;gt; &amp;#34;welcome#index&amp;#34; # 代表http://localhost:3000/welcome 會對應到 welcome Controller的index Action。  resources :events # 會自動生成四個四個命名路由(named routes)，搭配四個HTTP動詞，對應到七個Actions，如下： get &amp;#39;/events&amp;#39; =&amp;gt; &amp;#34;events#index&amp;#34;, :as =&amp;gt; &amp;#34;events&amp;#34; post &amp;#39;/events&amp;#39; =&amp;gt; &amp;#34;events#create&amp;#34;, :as =&amp;gt; &amp;#34;events&amp;#34; get &amp;#39;/events/:id&amp;#39; =&amp;gt; &amp;#34;events#show&amp;#34;, :as =&amp;gt; &amp;#34;event&amp;#34; put &amp;#39;/events/:id&amp;#39; =&amp;gt; &amp;#34;events#update&amp;#34;, :as =&amp;gt; &amp;#34;event&amp;#34; delete &amp;#39;/events/:id&amp;#39; =&amp;gt; &amp;#34;events#destroy&amp;#34;, :as =&amp;gt; &amp;#34;event&amp;#34; get &amp;#39;/events/new&amp;#39; =&amp;gt; &amp;#34;events#new&amp;#34;, :as =&amp;gt; &amp;#34;new_event&amp;#34; get &amp;#39;/events/:id/edit&amp;#39; =&amp;gt; &amp;#34;events#edit&amp;#34;, :as =&amp;gt; &amp;#34;edit_event&amp;#34; # get 是純讀取資料，對資料不會有任何影響，所以get資料可以回上一頁、refresh都ok；post則反之。 # HTML只有get、post，而Rails在post加上隱藏參數_method=PUT、_method=DELETE，就多了put、delete能用了。# &amp;lt;% 執行但不輸出 # &amp;lt;%= 輸出值 &amp;lt;% @people.</description>
    </item>
    
  </channel>
</rss>