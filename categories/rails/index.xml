<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rails on Bob 學習筆記</title>
    <link>https://blog.poyi.tw/categories/rails/</link>
    <description>Recent content in rails on Bob 學習筆記</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <lastBuildDate>Sun, 26 May 2019 15:28:03 +0800</lastBuildDate>
    
	<atom:link href="https://blog.poyi.tw/categories/rails/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Ubuntu] Ruby on Rails 基本環境建置 - Ubuntu 18.04 LTS</title>
      <link>https://blog.poyi.tw/posts/2019-05-26-rails-ubuntu-environment-ubuntu18-dot-04/</link>
      <pubDate>Sun, 26 May 2019 15:28:03 +0800</pubDate>
      
      <guid>https://blog.poyi.tw/posts/2019-05-26-rails-ubuntu-environment-ubuntu18-dot-04/</guid>
      <description>sudo adduser deploy sudo adduser deploy sudo exit  curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - echo &amp;quot;deb https://dl.yarnpkg.com/debian/ stable main&amp;quot; | sudo tee /etc/apt/sources.list.d/yarn.list sudo add-apt-repository ppa:chris-lea/redis-server sudo apt-get update sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev software-properties-common libffi-dev dirmngr gnupg apt-transport-https ca-certificates redis-server redis-tools nodejs yarn  git clone https://github.com/rbenv/rbenv.git ~/.rbenv echo &#39;export PATH=&amp;quot;$HOME/.</description>
    </item>
    
    <item>
      <title>[Ubuntu] Ruby on Rails 基本環境建置 - Ubuntu 16.04 LTS</title>
      <link>https://blog.poyi.tw/posts/2016-11-26-rails-ubuntu-environment-ubuntu16-dot-04/</link>
      <pubDate>Sat, 26 Nov 2016 16:56:10 +0800</pubDate>
      
      <guid>https://blog.poyi.tw/posts/2016-11-26-rails-ubuntu-environment-ubuntu16-dot-04/</guid>
      <description>sudo adduser bob sudo adduser bob sudo su bob  sudo apt-get update sudo apt-get upgrade sudo apt-get install vim nodejs autoconf sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev  Install Ruby &amp;amp; Rails cd git clone https://github.com/rbenv/rbenv.git ~/.rbenv echo &#39;export PATH=&amp;quot;$HOME/.rbenv/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc echo &#39;eval &amp;quot;$(rbenv init -)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc exec $SHELL git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build echo &#39;export PATH=&amp;quot;$HOME/.</description>
    </item>
    
    <item>
      <title>[Mac] Ruby on Rails 基本環境建置 - 10.14 Mojave</title>
      <link>https://blog.poyi.tw/posts/2016-10-30-rails-mac-os-environment-sierra/</link>
      <pubDate>Sun, 30 Oct 2016 15:39:21 +0800</pubDate>
      
      <guid>https://blog.poyi.tw/posts/2016-10-30-rails-mac-os-environment-sierra/</guid>
      <description>ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;  # 改用相對輕量的rbenv取代肥肥的rvm brew install rbenv ruby-build echo &#39;if which rbenv &amp;gt; /dev/null; then eval &amp;quot;$(rbenv init -)&amp;quot;; fi&#39; &amp;gt;&amp;gt; ~/.bash_profile source ~/.bash_profile rbenv install 2.6.3 rbenv global 2.6.3  gem install rails -v 6.0.0.rc1 rbenv rehash  brew install mysql brew install redis brew install ssdb brew install memcached  </description>
    </item>
    
    <item>
      <title>[Rails] 各種update method</title>
      <link>https://blog.poyi.tw/posts/2015-07-11-rails-various-update-methods/</link>
      <pubDate>Sat, 11 Jul 2015 17:16:55 +0800</pubDate>
      
      <guid>https://blog.poyi.tw/posts/2015-07-11-rails-various-update-methods/</guid>
      <description>##正規Rails的更新 - update
會觸發validation、callback、也會更新updated_at
&amp;gt; Comment.last.update(message: &#39;bbb&#39;) (0.1ms) begin transaction SQL (0.4ms) UPDATE &amp;quot;comments&amp;quot; SET &amp;quot;message&amp;quot; = ?, &amp;quot;updated_at&amp;quot; = ? WHERE &amp;quot;comments&amp;quot;.&amp;quot;id&amp;quot; = ? [[&amp;quot;message&amp;quot;, &amp;quot;bbb&amp;quot;], [&amp;quot;updated_at&amp;quot;, &amp;quot;2015-07-11 09:42:02.303661&amp;quot;], [&amp;quot;id&amp;quot;, 200]] (9.1ms) commit transaction =&amp;gt; true  ##相當於直接下SQL的更新 - update_columns, update_all
而 update_columns 及 update_all 是直接幫你下SQL更新欄位，會忽視Rails的validation，也沒有callback，updated_at也不會更新。所以最好是很確定要更新的值沒問題再使用這類語法。
&amp;gt; Comment.where(:id =&amp;gt; 200).first.update_columns(message: &#39;bbbbb&#39;, post_id: 3) SQL (9.2ms) UPDATE &amp;quot;comments&amp;quot; SET &amp;quot;message&amp;quot; = &#39;bbbbb&#39;, &amp;quot;post_id&amp;quot; = 3 WHERE &amp;quot;comments&amp;quot;.&amp;quot;id&amp;quot; = ? [[&amp;quot;id&amp;quot;, 200]] # update_column 跟 update_columns 相同，只是傳入值key跟value必須是string，並用逗點分隔 &amp;gt; Comment.</description>
    </item>
    
    <item>
      <title>[Rails] AJAX render errors in json</title>
      <link>https://blog.poyi.tw/posts/2015-06-12-rails-ajax-render-error-in-json/</link>
      <pubDate>Fri, 12 Jun 2015 19:02:48 +0800</pubDate>
      
      <guid>https://blog.poyi.tw/posts/2015-06-12-rails-ajax-render-error-in-json/</guid>
      <description>$.ajax({ url: URL, async:false, data:{ amount: 100, }, dataType:&#39;json&#39;, method:&#39;post&#39;, success:function(data){ // do success things }, error:function(xhr){ var errors = $.parseJSON(xhr.responseText).errors alert(errors); } );  def create if amount &amp;lt; 100 render :json =&amp;gt; { :errors =&amp;gt; &amp;quot;金額不足&amp;quot; }, :status =&amp;gt; 422 return end end  當錯誤回傳時，使用422(Unprocessable Entity)來做error handling
Reference:
http://travisjeffery.com/b/2012/04/rendering-errors-in-json-with-rails/ http://stackoverflow.com/questions/16133923/400-vs-422-response-to-post-of-data</description>
    </item>
    
    <item>
      <title>[Ruby] 匯出txt檔</title>
      <link>https://blog.poyi.tw/posts/2014-05-06-ruby-txt-file/</link>
      <pubDate>Tue, 06 May 2014 22:00:59 +0800</pubDate>
      
      <guid>https://blog.poyi.tw/posts/2014-05-06-ruby-txt-file/</guid>
      <description>需要在正式環境上撈大量特定資料下來，又不想dump整份database，用ORM來把資料匯出成txt就很方便了 all_users_mobile = User.where(&#39;mobile like ?&#39;, &#39;+8869%&#39;).select(:mobile).uniq # 建立txt並給予寫入權限 file = File.open(&#39;mobile_tw.txt&#39; , &#39;w&#39;) all_users_mobile.each do |mobile| file.puts mobile # 一行一筆mobile end # 記得要關掉 file.close  # 讀取txt file = File.open(&#39;mobile_tw.txt&#39; , &#39;r&#39;) 100.times do file.readline end  Reference:
http://ruby-doc.org/core-2.1.4/File.html</description>
    </item>
    
    <item>
      <title>[Mac] Ruby on Rails 基本環境建置 - 10.9 Mavericks</title>
      <link>https://blog.poyi.tw/posts/2014-01-17-rails-mac-os-environment-build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/posts/2014-01-17-rails-mac-os-environment-build/</guid>
      <description>是說終於買了mac，省去開箱文趕緊把環境用好來繼續練習Rails 但使用上還是有一點不習慣，會覺得有些地方也蠻不人性化，但相對穩定就是了
以下環境為OS X 10.9.1 Mavericks 1.安裝xcode-select Command line tool已經獨立出來，不需要安裝XCode了
$ xcode-select --install  如果安裝失敗的話也可以到這裡下載
2.安裝homebrew
$ ruby -e &amp;quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)&amp;quot;  3.安裝所需要的工具
$ brew install git  4.安裝RVM
$ curl -L https://get.rvm.io | bash -s stable  5.透過RVM來安裝RUBY
$ rvm install ruby  6.透過RVM來安裝RubyGems
$ rvm rubygems current  7.安裝Rails
$ gem install rails  ===
 XCode:官方提供的一個IDE，主要用來開發IOS APP，不過它也包含了一些開發其他語言所需的環境 Homebrew: OSX 套件管理工具 RVM (Ruby Version Manager):Ruby版本管理工具，便於切換不同版本  Reference:</description>
    </item>
    
    <item>
      <title>[Rails] ActiveRecord</title>
      <link>https://blog.poyi.tw/posts/2013-11-20-rails-activerecord/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/posts/2013-11-20-rails-activerecord/</guid>
      <description>class Boss &amp;lt; ActiveRecord::Base has_one :employee has_many :employees end class Employee &amp;lt; ActiveRecord::Base belongs_to :boss end  class Employee &amp;lt; ActiveRecord::Base belongs_to :manager, :class_name =&amp;gt; &amp;quot;User&amp;quot;, :foreign_key =&amp;gt; &amp;quot;manager_id&amp;quot; ,:order =&amp;gt; &amp;quot;id desc&amp;quot; end # class_name =&amp;gt; &amp;quot;User&amp;quot; 變更關聯class name # :foreign_key =&amp;gt; &amp;quot;manager_id&amp;quot;變更關聯foreign key,預設為class_id # :order =&amp;gt; &amp;quot;id desc&amp;quot; 排序  class Group &amp;lt; ActiveRecord::Base validates :name, presence: true # 此欄位必填 validates :name, :length =&amp;gt; { :minimum =&amp;gt; 2 } validates :bio, :length =&amp;gt; { :maximum =&amp;gt; 500 } validates :password, :length =&amp;gt; { :in =&amp;gt; 6.</description>
    </item>
    
    <item>
      <title>[Rails] Bootstrap for Rails</title>
      <link>https://blog.poyi.tw/posts/2013-12-07-rails-bootstrap-for-rails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/posts/2013-12-07-rails-bootstrap-for-rails/</guid>
      <description>gem &#39;bootstrap-sass&#39;  @import &#39;bootstrap&#39;  //= require bootstrap  這樣就可以用了yaya</description>
    </item>
    
    <item>
      <title>[Rails] Connect SQL Server</title>
      <link>https://blog.poyi.tw/posts/2013-10-30-rails-search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/posts/2013-10-30-rails-search/</guid>
      <description>看到官方提供的adpter..真的不知道怎麼下手.. 魯蛇無誤
Ubuntu Connect to SQL Server 想在Unix、Linux環境上，存取SQL Server似乎大多都使用FreeTDS
$ sudo apt-get install freetds-dev freetds-bin tdsodbc  $ tsql -C  $ tsql -H (SQL Server IP) -p 1433 -U (account) －P (password) –D (datebase name)  $ select * from Team $ go  這邊代表已能在Ubuntu Connect SQL Server 但Rails還需要其他套件
Rails Connect to SQL Server (Error) $ sudo gem install tiny_tds $ sudo gem install activerecord-sqlserver-adapter  修改DateBase.yml OK..在這邊理論上是可以直接在Rails調用.. 但執行時卻會出錯，查了一下好像還無解 (Rails 4似乎還不太支援之類的.</description>
    </item>
    
    <item>
      <title>[Rails] CRUD 備忘</title>
      <link>https://blog.poyi.tw/posts/2013-10-30-rails-crud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/posts/2013-10-30-rails-crud/</guid>
      <description>&amp;lt;%= link_to &#39;list&#39;, teams_path %&amp;gt; # GET def index @teams = Team.all end  &amp;lt;%= link_to &#39;show&#39;, team_path(team) %&amp;gt; # GET def show @team = Team.find(params[:id]) end  &amp;lt;%= link_to &#39;new Team&#39;, new_team_path %&amp;gt; def new @team = Team.new end  &amp;lt;%= form_for @team, :url =&amp;gt; teams_path do |t| %&amp;gt; #In a form, the default request method is POST &amp;lt;%= t.text_field :name %&amp;gt; &amp;lt;%= t.text_field :year %&amp;gt; &amp;lt;%= t.submit &amp;quot;Create&amp;quot; %&amp;gt; &amp;lt;% end %&amp;gt; def create Team.</description>
    </item>
    
    <item>
      <title>[Rails] 基本概念（待補）</title>
      <link>https://blog.poyi.tw/posts/2013-10-07-ruby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/posts/2013-10-07-ruby/</guid>
      <description>development: # 開發用 adapter: sqlite3 database: db/development.sqlite3 pool: 5 timeout: 5000 test: # 測試用 adapter: sqlite3 database: db/development.sqlite3 pool: 5 timeout: 5000 production: # 上線用 adapter: sqlite3 database: db/development.sqlite3 pool: 5 timeout: 5000  get &amp;quot;welcome&amp;quot; =&amp;gt; &amp;quot;welcome#index&amp;quot; # 代表http://localhost:3000/welcome 會對應到 welcome Controller的index Action。 resources :events # 會自動生成四個四個命名路由(named routes)，搭配四個HTTP動詞，對應到七個Actions，如下： get &#39;/events&#39; =&amp;gt; &amp;quot;events#index&amp;quot;, :as =&amp;gt; &amp;quot;events&amp;quot; post &#39;/events&#39; =&amp;gt; &amp;quot;events#create&amp;quot;, :as =&amp;gt; &amp;quot;events&amp;quot; get &#39;/events/:id&#39; =&amp;gt; &amp;quot;events#show&amp;quot;, :as =&amp;gt; &amp;quot;event&amp;quot; put &#39;/events/:id&#39; =&amp;gt; &amp;quot;events#update&amp;quot;, :as =&amp;gt; &amp;quot;event&amp;quot; delete &#39;/events/:id&#39; =&amp;gt; &amp;quot;events#destroy&amp;quot;, :as =&amp;gt; &amp;quot;event&amp;quot; get &#39;/events/new&#39; =&amp;gt; &amp;quot;events#new&amp;quot;, :as =&amp;gt; &amp;quot;new_event&amp;quot; get &#39;/events/:id/edit&#39; =&amp;gt; &amp;quot;events#edit&amp;quot;, :as =&amp;gt; &amp;quot;edit_event&amp;quot; # get 是純讀取資料，對資料不會有任何影響，所以get資料可以回上一頁、refresh都ok；post則反之。 # HTML只有get、post，而Rails在post加上隱藏參數_method=PUT、_method=DELETE，就多了put、delete能用了。  # &amp;lt;% 執行但不輸出 # &amp;lt;%= 輸出值 &amp;lt;% @people.</description>
    </item>
    
    <item>
      <title>[Rails] 小技巧</title>
      <link>https://blog.poyi.tw/posts/2013-10-16-rails-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/posts/2013-10-16-rails-tips/</guid>
      <description> .erb的註解 &amp;lt;% #註解可寫在井號後面 %&amp;gt; &amp;lt;% if false %&amp;gt; 或寫在這 &amp;lt;% end %&amp;gt;  .rb的註解 # 一般只用單行註解 =begin 多行註解比較少見 =end  檢查自己寫了多少code $ bundle exec rake stats  $ rake routes  </description>
    </item>
    
    <item>
      <title>[Rails] 打包Gem套件</title>
      <link>https://blog.poyi.tw/posts/2013-12-02-rails-gem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/posts/2013-12-02-rails-gem/</guid>
      <description>當我們要安裝別人寫好的Library、API時，通常會
gem &#39;google-translate&#39;  或是
$ gem install google-translate  打包gem 而當我們要打包自己的gem，自用或供他人使用，該怎麼做？
$ bundle gem bob_test_plugin  gem build bob_test_plugin.gemspec  此時會生成 bob_test_plugin-0.0.1.gem
$ sudo gem install bob_test_plugin-0.0.1.gem  irb&amp;gt;require &#39;bob_test_plugin&#39; =&amp;gt; true irb&amp;gt;BobTestPlugin.name =&amp;gt; &amp;quot;BobTestPlugin&amp;quot;  發佈在 RubyGems.org 申請RubyGems帳號
$ gem push bob_test_plugin-0.0.1.gem  Reference: http://blog.xdite.net/posts/2012/01/04/how-to-pack-a-gem http://jex.logdown.com/posts/164687-ruby-build-his-own-gem-packages</description>
    </item>
    
    <item>
      <title>[Ruby] 匯出批次csv檔</title>
      <link>https://blog.poyi.tw/posts/2014-05-06-ruby-csv-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.poyi.tw/posts/2014-05-06-ruby-csv-file/</guid>
      <description>讀取或寫入csv在ruby都蠻方便的，只是編碼或格式要稍微注意一下
匯出csv header = [&#39;name&#39;,&#39;money&#39;,&#39;age&#39;] body = [&#39;ruby&#39;,&#39;1000&#39;,&#39;18&#39;]  head = &#39;EF BB BF&#39;.split(&#39; &#39;).map{|a|a.hex.chr}.join() # 加入BOM，解決excel中文亂碼 csv_string = CSV.generate(csv = head) do |csv| csv &amp;lt;&amp;lt; header csv &amp;lt;&amp;lt; body end # &amp;gt; csv_string.encoding 執行這句會發現預設編碼為ACSII csv_string.force_encoding(&#39;big5&#39;) # BOM也可以這樣加 csv_string = &amp;quot;\xEF\xBB\xBF#{csv_string}&amp;quot; # 若不需要調整格式就直接下載 send_data csv_string  require &#39;csv&#39; CSV.open(&amp;quot;export.csv&amp;quot;,&amp;quot;w&amp;quot;) do |csv| csv &amp;lt;&amp;lt; header csv &amp;lt;&amp;lt; body end  半形轉全形 在某些情況會需要轉出全形字元，照理說不用才對，可能是因為合作對方的系統太爛 其實也不太確定怎解，我單純用硬幹的方式
def self.convert_to_wide_word(text) text.gsub(/[a-v]/){|a|(a.ord + 41608).chr(&#39;big5&#39;).encode(&#39;utf-8&#39;)} .gsub(/[w-z]/){|a|(a.ord + 41673).</description>
    </item>
    
  </channel>
</rss>